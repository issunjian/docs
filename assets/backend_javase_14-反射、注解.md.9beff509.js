import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/1668575265599.893a4a26.png",o="/docs/assets/1668575796295.5eccab56.png",e="/docs/assets/1668576426355.cd2db4f0.png",t="/docs/assets/1668576691591.4028a1db.png",c="/docs/assets/1668577010983.297044f9.png",r="/docs/assets/1668578112815.f5e8caee.png",y="/docs/assets/1668578397467.802b21ed.png",F="/docs/assets/1668578639149.3e8258c1.png",i="/docs/assets/1668578807439.159ae885.png",E="/docs/assets/1668579315586.e4792daf.png",u="/docs/assets/1668579177901.f90f70ce.png",d="/docs/assets/1668579517323.dd13d241.png",C="/docs/assets/1668580075962.3cc7bc8d.png",g="/docs/assets/image-2023-03-26-21-32-00.8007e4d1.png",D="/docs/assets/image-2023-03-26-21-30-39.85cf3377.png",A="/docs/assets/1668580761089.e7dc8d1b.png",v="/docs/assets/image-2023-03-26-21-59-46.303e0657.png",b="/docs/assets/1668581800777.cafe24a8.png",h="/docs/assets/1668582519455.77516aee.png",m="/docs/assets/1668583255686.392dc025.png",f="/docs/assets/1668584556229.9fe6f078.png",q="/docs/assets/1669603664584.b6b41358.png",T="/docs/assets/1669604102185.ea2c5d64.png",B="/docs/assets/1669605746113.aeda010f.png",M="/docs/assets/1669605786028.33d8bee6.png",S="/docs/assets/1669606261919.52e0bc2b.png",k="/docs/assets/1669606451308.5bdeaf9e.png",j="/docs/assets/1669607820853.c3f71a96.png",_="/docs/assets/1669607882128.29351e53.png",Y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/javase/14-反射、注解.md","filePath":"backend/javase/14-反射、注解.md"}'),O={name:"backend/javase/14-反射、注解.md"},P=l('<h2 id="反射、注解" tabindex="-1">反射、注解 <a class="header-anchor" href="#反射、注解" aria-label="Permalink to &quot;反射、注解&quot;">​</a></h2><ul><li>反射 <ul><li>获取字节码方式 ❤️</li><li>获取成员变量 🍐 成 员、构造、方法获取方式非常相似</li><li>获取构造方法 🍐</li><li>获取普通方法 🍐</li></ul></li><li>注解 <ul><li>注解的作用 🍐</li><li>解析注解 🚀</li></ul></li></ul><p>前置知识</p><ol><li>知道.java文件通过javac命令 能编译成.class文件</li><li>知道类一般由成员变量、构造方法、普通方法组成</li><li>能理解配置文件的作用</li></ol><h2 id="一、反射-🚩-🍐-理解" tabindex="-1">一、反射 🚩 🍐 理解 <a class="header-anchor" href="#一、反射-🚩-🍐-理解" aria-label="Permalink to &quot;一、反射 🚩 🍐 理解&quot;">​</a></h2><p>学前交代</p><ol><li>反射、动态代理、注解等知识点,在以后开发中极少用到。</li><li>这些技术都是以后学习框架、或者做框架的底层源码的。</li><li>讲解的目的是为了以后我们<strong>理解</strong>框架、或者<strong>自己开发框架</strong>架构师给别人用作铺垫的</li><li>接下来的学习的节奏是：先认识，在了解作用和场景</li></ol><hr><p>反射技术</p><p>反射技术 指的是<strong>加载</strong>类的<strong>字节码</strong>到<strong>内存</strong>，并以编程的方法解刨出<strong>类中</strong>的<strong>各个成分</strong>（成员变量、方法、构造器等）</p><ol><li>Java中反射技术用到的类在<code>java.lang.reflect</code>包中 <img src="'+p+'"></li><li>用IDEA开发程序时，用对象调用方法，IDEA会有代码提示，idea会将这个对象能调用的方法都给你列举出来，供你选择。这个场景就用到了<strong>反射技术</strong><img src="'+o+'"></li><li>学习反射，主要学习通过反射技术获得： <img src="'+e+`"></li></ol><blockquote><p>由于Java的设计原则是万物皆对象，获取到的类其实也是以对象的形式体现的,叫做<strong>字节码对象</strong></p><ul><li>字节码对象，用<code>Class</code>类来表示</li><li>构造器对象，用<code>Constructor</code>类的对象来表示</li><li>成员变量对象，用<code>Field</code>类的对象来表示</li><li>成员方法对象，用<code>Method</code>类的对象来表示</li></ul></blockquote><p>练习反射素材准备</p><p><strong>准备案例代码Cat类，接下来通过方法获得他的成员变量，成员方法，以及构造方法对象</strong></p><p>点击查看Cat类素材</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Cat</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#7B7F8B;">//    私有的成员变量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//    公开的成员变量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> sex;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//    公开的无参构造</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Cat</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">空参数构造方法执行了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//    私有的有参构造</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Cat</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">有参数构造方法执行了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//私有的无参普通方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(&gt;^ω^&lt;)喵跑得贼快~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//公开的无参普通方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">eat</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(&gt;^ω^&lt;)喵爱吃猫粮~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//私有的有参普通方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">eat</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(&gt;^ω^&lt;)喵爱吃:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//  get 和set 以及toString方法省略...自行实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">//    私有的成员变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//    公开的成员变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sex;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//    公开的无参构造</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;空参数构造方法执行了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//    私有的有参构造</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;有参数构造方法执行了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//私有的无参普通方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(&gt;^ω^&lt;)喵跑得贼快~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//公开的无参普通方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(&gt;^ω^&lt;)喵爱吃猫粮~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//私有的有参普通方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&gt;^ω^&lt;)喵爱吃:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  get 和set 以及toString方法省略...自行实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_1️⃣-1-1-反射入门案例-🍐-✏️" tabindex="-1">1️⃣ 1.1 反射入门案例 🍐 ✏️ <a class="header-anchor" href="#_1️⃣-1-1-反射入门案例-🍐-✏️" aria-label="Permalink to &quot;1️⃣ 1.1 反射入门案例 🍐 ✏️&quot;">​</a></h3><h4 id="_1-1-获取类的字节码" tabindex="-1">1.1 获取类的字节码 <a class="header-anchor" href="#_1-1-获取类的字节码" aria-label="Permalink to &quot;1.1 获取类的字节码&quot;">​</a></h4><p>反射的第一步：是将字节码加载到内存，我们需要获取到的字节码对象。</p><img src="`+t+`"><blockquote><p>比如有一个Cat类，获取Cat类的字节码代码有三种写法。不管用哪一种方式，获取到的字节码对象其实是同一个。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test1Class</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 方式1：类名.class</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c1.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">//获取全类名</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c1.</span><span style="color:#62E884;">getSimpleName</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">//获取简单类名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 方式2：Class.forName(&quot;全类名&quot;)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 全类名快捷键：选中类，按住ctrl+alt+shift+C 粘贴到 &quot;这里&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.reflect.Cat</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c1 </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> c2); </span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#7B7F8B;">// 方式3：对象.getClass()</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Cat</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c2 </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> c3); </span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test1Class</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 方式1：类名.class</span></span>
<span class="line"><span style="color:#24292E;">        Class c1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">//获取全类名</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c1.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">//获取简单类名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 方式2：Class.forName(&quot;全类名&quot;)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 全类名快捷键：选中类，按住ctrl+alt+shift+C 粘贴到 &quot;这里&quot;</span></span>
<span class="line"><span style="color:#24292E;">        Class c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.itheima.reflect.Cat&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> c2); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 方式3：对象.getClass()</span></span>
<span class="line"><span style="color:#24292E;">        Cat s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Class c3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> c3); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_1-2-获取类的构造器" tabindex="-1">1.2 获取类的构造器 <a class="header-anchor" href="#_1-2-获取类的构造器" aria-label="Permalink to &quot;1.2 获取类的构造器&quot;">​</a></h4><p>反射的第二步：通过字节码对象获得获取构造器对象</p><p>获取构造器，需要用到Class类提供的几个方法，如下图所示：</p><img src="`+c+`"><blockquote><p>方法记忆技巧</p><ul><li>getXX:获取什么</li><li>Constructor: 构造方法的意思</li><li>Declared:获得任意的，包含private的，没有这个单词表示只能获取一个public修饰的</li><li>后缀s: 表示可以获取多个，没有后缀s只能获取一个</li></ul></blockquote><p>点击查看获取类中构造器对象代码</p><ul><li><ol><li>接下来，我们写一个测试方法，来测试获取类中所有的构造器</li></ol></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test2Constructor</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testGetConstructors</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//1、反射第一步：必须先得到这个类的Class对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//2、获取类的全部构造器</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;">[] constructors </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getDeclaredConstructors</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//3、遍历数组中的每一个构造器对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> constructors){</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(constructor.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---&gt; 参数个数：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">constructor.</span><span style="color:#62E884;">getParameterCount</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test2Constructor</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetConstructors</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1、反射第一步：必须先得到这个类的Class对象</span></span>
<span class="line"><span style="color:#24292E;">        Class c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2、获取类的全部构造器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Constructor</span><span style="color:#24292E;">[] constructors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getDeclaredConstructors</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3、遍历数组中的每一个构造器对象。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Constructor constructor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> constructors){</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(constructor.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;---&gt; 参数个数：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">constructor.</span><span style="color:#6F42C1;">getParameterCount</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行测试方法打印结果如下</p><img src="`+r+`"><ul><li><ol start="2"><li>刚才演示的是获取Cat类中所有的构造器，接下来，我们演示单个构造器试一试</li></ol></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test2Constructor</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testGetConstructor</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//1、反射第一步：必须先得到这个类的Class对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//2、获取类public修饰的空参数构造器</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(constructor1.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---&gt; 参数个数：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">constructor1.</span><span style="color:#62E884;">getParameterCount</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//3、获取private修饰的有两个参数的构造器，第一个参数String类型，第二个参数int类型</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor2 </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">            c.</span><span style="color:#62E884;">getDeclaredConstructor</span><span style="color:#F6F6F4;">(String.class,int.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(constructor2.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---&gt; 参数个数：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">constructor1.</span><span style="color:#62E884;">getParameterCount</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test2Constructor</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetConstructor</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1、反射第一步：必须先得到这个类的Class对象</span></span>
<span class="line"><span style="color:#24292E;">        Class c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2、获取类public修饰的空参数构造器</span></span>
<span class="line"><span style="color:#24292E;">        Constructor constructor1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(constructor1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;---&gt; 参数个数：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">constructor1.</span><span style="color:#6F42C1;">getParameterCount</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3、获取private修饰的有两个参数的构造器，第一个参数String类型，第二个参数int类型</span></span>
<span class="line"><span style="color:#24292E;">        Constructor constructor2 </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            c.</span><span style="color:#6F42C1;">getDeclaredConstructor</span><span style="color:#24292E;">(String.class,int.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(constructor2.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;---&gt; 参数个数：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">constructor1.</span><span style="color:#6F42C1;">getParameterCount</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>打印结果如下</p><img src="`+y+`"><p>点击查看构造器的作用</p><p>其实构造器的作用：<strong>初始化对象并返回</strong>。</p><p><strong>1.调用公开且无参的构造 示例代码</strong> 👇</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">//        获得无参的构造方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;">&lt;Cat&gt; constructor1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">//        通过构造方法创建Cat对象（注意：不需要new哦）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;"> cat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> constructor1.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">//        打印对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(cat);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">//        获得无参的构造方法</span></span>
<span class="line"><span style="color:#24292E;">        Constructor&lt;</span><span style="color:#D73A49;">Cat</span><span style="color:#24292E;">&gt; constructor1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        通过构造方法创建Cat对象（注意：不需要new哦）</span></span>
<span class="line"><span style="color:#24292E;">        Cat cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor1.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        打印对象</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cat);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>2.调用私有且有参的构造示例代码</strong> 👇</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">//        获得私有的有参构造方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;">&lt;Cat&gt; constructor1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class.</span><span style="color:#62E884;">getDeclaredConstructor</span><span style="color:#F6F6F4;">(String.class,int.class);</span></span>
<span class="line"><span style="color:#7B7F8B;">//        因为是私有的，所以要手动取消检查</span></span>
<span class="line"><span style="color:#F6F6F4;">        constructor1.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//        通过有参的构造方法创建Cat对象（注意：不需要new哦）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;"> cat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> constructor1.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">韩立</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//        打印对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(cat);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">//        获得私有的有参构造方法</span></span>
<span class="line"><span style="color:#24292E;">        Constructor&lt;</span><span style="color:#D73A49;">Cat</span><span style="color:#24292E;">&gt; constructor1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class.</span><span style="color:#6F42C1;">getDeclaredConstructor</span><span style="color:#24292E;">(String.class,int.class);</span></span>
<span class="line"><span style="color:#6A737D;">//        因为是私有的，所以要手动取消检查</span></span>
<span class="line"><span style="color:#24292E;">        constructor1.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        通过有参的构造方法创建Cat对象（注意：不需要new哦）</span></span>
<span class="line"><span style="color:#24292E;">        Cat cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor1.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;韩立&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        打印对象</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cat);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们需要用到如下的两个方法，注意：这两个方法时属于Constructor的，需要用Constructor对象来调用。</p><img src="`+F+'"><p>如下图所示，constructor1和constructor2分别表示Cat类中的两个构造器。现在我要把这两个构造器执行起来</p><img src="'+i+'"><p>由于构造器是private修饰的，先需要调用<code>setAccessible(true)</code> 表示禁止检查访问控制，然后再调用<code>newInstance(实参列表)</code> 就可以执行构造器，完成对象的初始化了。</p><p>代码如下：为了看到构造器真的执行， 故意在两个构造器中分别加了两个打印语句</p><img src="'+E+'"><p>代码的执行结果如下图所示：</p><img src="'+u+'"><h4 id="_1-3-获取类的成员变量" tabindex="-1">1.3 获取类的成员变量 <a class="header-anchor" href="#_1-3-获取类的成员变量" aria-label="Permalink to &quot;1.3 获取类的成员变量&quot;">​</a></h4><p>反射的第三步：通过字节码文件对象获得成员变量对象</p><blockquote><p>其实套路是一样的，在Class类中提供了获取成员变量的方法，如下图所示。 <img src="'+d+`"></p></blockquote><blockquote><p>方法记忆技巧</p><ul><li>getXX:获取什么</li><li>Constructor: 构造方法的意思</li><li>Declared:获得任意的，包含private的，没有这个单词表示只能获取一个public修饰的</li><li>后缀s: 表示可以获取多个，没有后缀s只能获取一个</li></ul></blockquote><p><strong>获得成员变量对象的示例代码</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">//获得字节码文件</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;Cat&gt; catClass </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class;</span></span>
<span class="line"><span style="color:#7B7F8B;">//        通过字节码文件 获得全部的成员变量</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;">[] declaredFields </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">getDeclaredFields</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(declaredFields));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//     通过字节码文件 获得public成员变量</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;">[] fields </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">getFields</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(fields));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">//获得字节码文件</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">Cat</span><span style="color:#24292E;">&gt; catClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class;</span></span>
<span class="line"><span style="color:#6A737D;">//        通过字节码文件 获得全部的成员变量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Field</span><span style="color:#24292E;">[] declaredFields </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">getDeclaredFields</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(declaredFields));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//     通过字节码文件 获得public成员变量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Field</span><span style="color:#24292E;">[] fields </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">getFields</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(fields));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>点击查看使用获取到成员变量的对象 代码</p><ul><li>获取到成员变量的对象之后该如何使用呢？ 在Filed类中提供给给成员变量赋值和获取值的方法，如下图所示。 <img src="`+C+`"></li></ul><p><strong>使用获得的成员变量的示例代码</strong> 👇</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">//获得字节码文件</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;Cat&gt; catClass </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class;</span></span>
<span class="line"><span style="color:#7B7F8B;">//        通过字节码文件 获得指定的成员变量</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> nameField </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">getDeclaredField</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> sexField </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">getDeclaredField</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sex</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//        创建对象</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;"> cat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//        设置值</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//        name是私有的，需要取消检查</span></span>
<span class="line"><span style="color:#F6F6F4;">        nameField.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        nameField.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(cat,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">加菲猫</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//        sex是公开的不需要取消检查</span></span>
<span class="line"><span style="color:#F6F6F4;">        sexField.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(cat,</span><span style="color:#BF9EEE;">999</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//        输出对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(cat);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">//获得字节码文件</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">Cat</span><span style="color:#24292E;">&gt; catClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class;</span></span>
<span class="line"><span style="color:#6A737D;">//        通过字节码文件 获得指定的成员变量</span></span>
<span class="line"><span style="color:#24292E;">        Field nameField </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">getDeclaredField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Field sexField </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">getDeclaredField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        创建对象</span></span>
<span class="line"><span style="color:#24292E;">         Cat cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        设置值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//        name是私有的，需要取消检查</span></span>
<span class="line"><span style="color:#24292E;">        nameField.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        nameField.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(cat,</span><span style="color:#032F62;">&quot;加菲猫&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//        sex是公开的不需要取消检查</span></span>
<span class="line"><span style="color:#24292E;">        sexField.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(cat,</span><span style="color:#005CC5;">999</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        输出对象</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cat);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再次强调一下设置值、获取值的方法时Filed类的需要用Filed类的对象来调用，而且不管是设置值、还是获取值，都需要依赖于该变量所属的对象。代码如下 <img src="`+g+'"></p><p><strong>效果：</strong></p><img src="'+D+'"><h4 id="_1-4获取类的成员方法" tabindex="-1">1.4获取类的成员方法 <a class="header-anchor" href="#_1-4获取类的成员方法" aria-label="Permalink to &quot;1.4获取类的成员方法&quot;">​</a></h4><p>反射的第二步：通过字节码文件对象获得成员方法对象</p><p>在Java中反射包中，每一个成员方法用Method对象来表示，通过Class类提供的方法可以获取类中的成员方法对象。如下下图所示</p><img src="'+A+`"><blockquote><p>方法记忆技巧</p><ul><li>getXX:获取什么</li><li>Constructor: 构造方法的意思</li><li>Declared:获得任意的，包含private的，没有这个单词表示只能获取一个public修饰的</li><li>后缀s: 表示可以获取多个，没有后缀s只能获取一个</li></ul></blockquote><p><strong>获得成员方法的示例代码</strong> 👇</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test4</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">//获得字节码文件</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;Cat&gt; catClass </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class;</span></span>
<span class="line"><span style="color:#7B7F8B;">//        通过字节码文件 获得指定的 无参 成员方法</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> run </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">getDeclaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">run</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//        通过字节码文件 获得指定的 有参 成员方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> eat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">getDeclaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">eat</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,String.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//        调用方法需要对象，创建对象</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;"> cat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> catClass.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//         注意:2个方法都是private 需要取消安全检查</span></span>
<span class="line"><span style="color:#F6F6F4;">        run.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        eat.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//         调用方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        run.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(cat);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//        eat方法有返回值</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> ret </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> eat.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(cat, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">欧力给</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ret);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">//获得字节码文件</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">Cat</span><span style="color:#24292E;">&gt; catClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class;</span></span>
<span class="line"><span style="color:#6A737D;">//        通过字节码文件 获得指定的 无参 成员方法</span></span>
<span class="line"><span style="color:#24292E;">         Method run </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;run&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        通过字节码文件 获得指定的 有参 成员方法</span></span>
<span class="line"><span style="color:#24292E;">        Method eat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eat&quot;</span><span style="color:#24292E;">,String.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        调用方法需要对象，创建对象</span></span>
<span class="line"><span style="color:#24292E;">         Cat cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> catClass.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//         注意:2个方法都是private 需要取消安全检查</span></span>
<span class="line"><span style="color:#24292E;">        run.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        eat.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//         调用方法</span></span>
<span class="line"><span style="color:#24292E;">        run.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(cat);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        eat方法有返回值</span></span>
<span class="line"><span style="color:#24292E;">         Object ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eat.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(cat, </span><span style="color:#032F62;">&quot;欧力给&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ret);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><img src="`+v+'"><p>获取到成员方法的对象之后该如何使用呢</p><p>在Method类中提供了方法，可以将方法自己执行起来。</p><img src="'+b+`"><p>下面我们演示一下，把<code>run()</code>方法和<code>eat(String name)</code>方法执行起来。看分割线之下的代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test3Method</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//1、反射第一步：先获取到Class对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Cat.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//2、获取类中的全部成员方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;">[] methods </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getDecalaredMethods</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//3、遍历这个数组中的每一个方法对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> method </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> methods){</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(method.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">method.</span><span style="color:#62E884;">getParameterCount</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">method.</span><span style="color:#62E884;">getReturnType</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-----------------------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//4、获取private修饰的run方法，得到Method对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> run </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getDecalaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">run</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//执行run方法,在执行前需要取消权限检查</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;"> cat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Cat</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        run.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> rs1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> run.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(cat);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(rs1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//5、获取private 修饰的eat(String name)方法，得到Method对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> eat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getDeclaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">eat</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,String.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        eat.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> rs2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> eat.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(cat,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">鱼儿</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(rs2)</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test3Method</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1、反射第一步：先获取到Class对象</span></span>
<span class="line"><span style="color:#24292E;">        Class c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2、获取类中的全部成员方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getDecalaredMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3、遍历这个数组中的每一个方法对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Method method </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> methods){</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;--&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">method.</span><span style="color:#6F42C1;">getParameterCount</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;--&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-----------------------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//4、获取private修饰的run方法，得到Method对象</span></span>
<span class="line"><span style="color:#24292E;">        Method run </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getDecalaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;run&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//执行run方法,在执行前需要取消权限检查</span></span>
<span class="line"><span style="color:#24292E;">        Cat cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        run.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Object rs1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> run.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(cat);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(rs1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//5、获取private 修饰的eat(String name)方法，得到Method对象</span></span>
<span class="line"><span style="color:#24292E;">        Method eat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eat&quot;</span><span style="color:#24292E;">,String.class);</span></span>
<span class="line"><span style="color:#24292E;">        eat.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Object rs2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eat.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(cat,</span><span style="color:#032F62;">&quot;鱼儿&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(rs2)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>打印结果如下图所示：run()方法执行后打印<code>猫跑得贼快~~</code>，返回<code>null</code>； eat()方法执行完，直接返回<code>猫最爱吃:鱼儿</code></p><img src="`+h+'"><h3 id="_2️⃣-1-2-反射应用-🍐-✏️" tabindex="-1">2️⃣ 1.2 反射应用 🍐 ✏️ <a class="header-anchor" href="#_2️⃣-1-2-反射应用-🍐-✏️" aria-label="Permalink to &quot;2️⃣ 1.2 反射应用 🍐 ✏️&quot;">​</a></h3><p>知识前提</p><ol><li>能获得字节码文件对象</li><li>能通过字节码对象获得普通方法对象和私有方法(Method)对象</li><li>能通过字节码对象获得普通成员对象和私有成员(Field)对象</li><li>理解反射可以获得运行状态下的类的成员变量和成员方法，并可以调用成员方法和修改成员变量的值</li></ol><p>温馨提示</p><p>各位小伙伴，按照前面我们学习反射的套路，我们已经充分认识了：</p><ol><li>什么是反射，</li><li>反射的核心作用是用来获取类的各个组成部分并执行他们。 <ul><li>但是由于小伙伴的经验有限，对于反射的具体应用场景还是很难感受到的（这个目前没有太好的办法，只能慢慢积累，等经验积累到一定程度，就会豁然开朗了）。 <ul><li>下面会提供2个案例，一起来巩固下</li></ul></li></ul></li></ol><p>需求1</p><p>让我们写一个框架，能够将任意一个对象的属性名和属性值写到文件中去。不管这个对象有多少个属性，也不管这个对象的属性名是否相同。</p><img src="'+m+`"><p>需求分析</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.先写好两个类，一个Student类和Teacher类</span></span>
<span class="line"><span style="color:#F6F6F4;">2.写一个ObjectFrame类代表框本架</span></span>
<span class="line"><span style="color:#F6F6F4;">	在</span><span style="color:#62E884;">ObjectFrame类中定义一个saveObject</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> obj)方法，用于将任意对象存到文件中去</span></span>
<span class="line"><span style="color:#F6F6F4;">	参数：</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 就表示要存入文件中的对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">3.编写方法内部的代码，往文件中存储对象的属性名和属性值</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)参数obj对象中有哪些属性，属性名是什么实现值是什么，中有对象自己最清楚。</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)接着就通过反射获取类的成员变量信息了（变量名、变量值）</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)把变量名和变量值写到文件中去</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.先写好两个类，一个Student类和Teacher类</span></span>
<span class="line"><span style="color:#24292E;">2.写一个ObjectFrame类代表框本架</span></span>
<span class="line"><span style="color:#24292E;">	在</span><span style="color:#6F42C1;">ObjectFrame类中定义一个saveObject</span><span style="color:#24292E;">(Object obj)方法，用于将任意对象存到文件中去</span></span>
<span class="line"><span style="color:#24292E;">	参数：Object obj</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 就表示要存入文件中的对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">3.编写方法内部的代码，往文件中存储对象的属性名和属性值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)参数obj对象中有哪些属性，属性名是什么实现值是什么，中有对象自己最清楚。</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)接着就通过反射获取类的成员变量信息了（变量名、变量值）</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)把变量名和变量值写到文件中去</span></span></code></pre></div><p>点击查看示例代码</p><p>1️⃣ 写一个ObjectFrame表示自己设计的框架，代码如下图所示</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ObjectFrame</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">saveObject</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">PrintStream</span><span style="color:#F6F6F4;"> ps </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">PrintStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">模块名</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">src</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">data.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//1)参数obj对象中有哪些属性，属性名是什么实现值是什么，中有对象自己最清楚。</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//2)接着就通过反射获取类的成员变量信息了（变量名、变量值）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//获取字节码</span></span>
<span class="line"><span style="color:#F6F6F4;">        ps.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">class.</span><span style="color:#62E884;">getSimpleName</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;">[] fields </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getDeclaredFields</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//获取所有成员变量</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//3)把变量名和变量值写到文件中去</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> field </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> fields){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> field.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> field.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(obj)</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            ps.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(name);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        ps.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectFrame</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveObject</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{</span></span>
<span class="line"><span style="color:#24292E;">        PrintStream ps </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;模块名</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">data.txt&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1)参数obj对象中有哪些属性，属性名是什么实现值是什么，中有对象自己最清楚。</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//2)接着就通过反射获取类的成员变量信息了（变量名、变量值）</span></span>
<span class="line"><span style="color:#24292E;">        Class c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//获取字节码</span></span>
<span class="line"><span style="color:#24292E;">        ps.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;---------&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">class.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;---------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Field</span><span style="color:#24292E;">[] fields </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getDeclaredFields</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//获取所有成员变量</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//3)把变量名和变量值写到文件中去</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Field field </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fields){</span></span>
<span class="line"><span style="color:#24292E;">            String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> field.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            Object value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> field.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(obj)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            ps.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ps.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用自己设计的框架，往文件中写入Student对象的信息和Teacher对象的信息。</p><p>2️⃣ 先准备好Student类和Teacher类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Student</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> sex;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> height;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> hobby;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> sex;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String hobby;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Teacher</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> salary;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Teacher</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> salary;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>3️⃣ 创建一个测试类，在测试中类创建一个Student对象，创建一个Teacher对象，用ObjectFrame的方法把这两个对象所有的属性名和属性值写到文件中去。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test5Frame</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">黑马吴彦祖</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">45</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">男</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">185.3</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">篮球，冰球，阅读</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Teacher</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Teacher</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">播妞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">999.9</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        ObjectFrame.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">(s1);</span></span>
<span class="line"><span style="color:#F6F6F4;">        ObjectFrame.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">(s2);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test5Frame</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{</span></span>
<span class="line"><span style="color:#24292E;">        Student s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;黑马吴彦祖&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;男&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">185.3</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;篮球，冰球，阅读&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Teacher s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Teacher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;播妞&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">999.9</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ObjectFrame.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(s1);</span></span>
<span class="line"><span style="color:#24292E;">        ObjectFrame.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(s2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>4️⃣ 打开data.txt文件，内容如下图所示，就说明我们这个框架的功能已经实现了</p><img src="`+f+`"><p>需求2</p><ol><li>在泛型为 Integer 的 ArrayList 中，存入一个字符串</li><li>调用 ArrayList 中私有的方法 outOfBoundsMsg，并且打印返回值</li></ol><p>点击查看案例代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 该机制允许程序员在编译时检测到非法的类型。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ClassLoaderDemo2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;Integer&gt; integers </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        integers.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        integers.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        integers.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">333</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//        integers.add(&quot;韩立&quot;); 因为泛型的原因，无法直接添加字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//在运行状态下，获取add方法，并且在运行状态下 调用add方法，并传入参数</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> add </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> integers.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">add</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, Object.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        add.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(integers,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">韩立</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(integers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//无视修饰符，可以调用任意方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> outOfBoundsMsg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> integers.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getDeclaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">outOfBoundsMsg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, int.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        outOfBoundsMsg.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> invoke </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> outOfBoundsMsg.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(integers, </span><span style="color:#BF9EEE;">1111</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">结果：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">invoke);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，</span></span>
<span class="line"><span style="color:#6A737D;"> * 该机制允许程序员在编译时检测到非法的类型。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassLoaderDemo2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; integers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        integers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">111</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        integers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">222</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        integers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">333</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        integers.add(&quot;韩立&quot;); 因为泛型的原因，无法直接添加字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//在运行状态下，获取add方法，并且在运行状态下 调用add方法，并传入参数</span></span>
<span class="line"><span style="color:#24292E;">        Method add </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> integers.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;add&quot;</span><span style="color:#24292E;">, Object.class);</span></span>
<span class="line"><span style="color:#24292E;">        add.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(integers,</span><span style="color:#032F62;">&quot;韩立&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(integers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//无视修饰符，可以调用任意方法</span></span>
<span class="line"><span style="color:#24292E;">        Method outOfBoundsMsg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> integers.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;outOfBoundsMsg&quot;</span><span style="color:#24292E;">, int.class);</span></span>
<span class="line"><span style="color:#24292E;">        outOfBoundsMsg.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Object invoke </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> outOfBoundsMsg.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(integers, </span><span style="color:#005CC5;">1111</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;结果：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">invoke);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="二、注解-🚩" tabindex="-1">二、注解 🚩 <a class="header-anchor" href="#二、注解-🚩" aria-label="Permalink to &quot;二、注解 🚩&quot;">​</a></h2><h3 id="_1️⃣-2-1-认识注解-定义注解" tabindex="-1">1️⃣ 2.1 认识注解&amp;定义注解 <a class="header-anchor" href="#_1️⃣-2-1-认识注解-定义注解" aria-label="Permalink to &quot;1️⃣ 2.1 认识注解&amp;定义注解&quot;">​</a></h3><p>学习目的</p><p>注解和反射一样，都是用来做框架的，我们这里学习注解的目的其实是为了以后<strong>学习框架或者做框架</strong>做铺垫的。</p><blockquote><p>学习技巧：先认识注解，掌握注解的定义和使用格式，然后学习应用场景</p></blockquote><p>一、注解的定义和使用</p><blockquote><p>注释：给程序员看的，了解程序的情况</p><p>注解：程序的标记，程序获取其中的信息，根据信息执行程序</p></blockquote><ol><li><strong>Java注解</strong>是代码中的<strong>特殊标记</strong>，比如<code>@Override</code>、<code>@Test</code>等，作用是：<strong>让其他程序根据注解信息决定怎么执行该程序。</strong> 👈</li></ol><p>点击查看用过的注解</p><p>比如：Junit框架的<code>@Test</code>注解可以用在方法上，用来标记这个方法是测试方法，被<code>@Test</code>标记的方法能够被Junit框架执行。</p><p>再比如：<code>@Override</code>注解可以用在方法上，用来标记这个方法是重写方法，被<code>@Override</code>注解标记的方法能够被IDEA识别进行语法检查。</p><img src="`+q+'"><ol start="2"><li><strong>注解不光可以用在方法上，还可以用在类上、变量上、构造器上等位置。</strong> 👈</li></ol><p>二、自定义注解：</p><p>自定义注解的格式如下图所示</p><img src="'+T+`"><ol><li><strong>格式属性类型</strong><ul><li>基本数据类型</li><li>String</li><li>Class 字节码文件对象</li><li>注解</li><li>枚举 Enum</li><li>以上类型的一维数组</li></ul></li></ol><p>注意：如果只有一个属性需要赋值，<strong>并且属性的名称是 value</strong>，则 <strong>value 可以省略</strong>，直接定义值即可(如下图)</p><h4 id="三、自定义注解和使用自定义注解" tabindex="-1">三、<strong>自定义注解和使用自定义注解</strong> <a class="header-anchor" href="#三、自定义注解和使用自定义注解" aria-label="Permalink to &quot;三、**自定义注解和使用自定义注解**&quot;">​</a></h4><p>比如：现在我们自定义一个MyTest注解</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">aaa</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">bbb</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;	</span><span style="color:#7B7F8B;">//default true 表示默认值为true,使用时可以不赋值。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#62E884;">ccc</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">MyTest</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">aaa</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bbb</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;	</span><span style="color:#6A737D;">//default true 表示默认值为true,使用时可以不赋值。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">ccc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>定义好MyTest注解之后，我们可以使用MyTest注解在类上、方法上等位置做标记。注意使用注解时需要加@符号，如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">MyTest1</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">aaa</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛魔王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">ccc</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HTML</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Java</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AnnotationTest1</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">MyTest</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">aaa</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">铁扇公主</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">bbb</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">ccc</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Python</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">前端</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Java</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MyTest1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">aaa</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;牛魔王&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">ccc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;HTML&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationTest1</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MyTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">aaa</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;铁扇公主&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">bbb</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ccc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;Python&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;前端&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意：注解的属性名如何是value的话，并且只有value没有默认值，使用注解时value名称可以省略。比如现在重新定义一个MyTest2注解</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyTest2</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">value</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//特殊属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">age</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">MyTest2</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//特殊属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>定义好MyTest2注解后，再将@MyTest2标记在类上，此时value属性名可以省略，代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">MyTest2</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">孙悟空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">//等价于 @MyTest2(value=&quot;孙悟空&quot;)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">MyTest1</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">aaa</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛魔王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">ccc</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HTML</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Java</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AnnotationTest1</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">MyTest</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">aaa</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">铁扇公主</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">bbb</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">ccc</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Python</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">前端</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Java</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MyTest2</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;孙悟空&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//等价于 @MyTest2(value=&quot;孙悟空&quot;)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MyTest1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">aaa</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;牛魔王&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">ccc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;HTML&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationTest1</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MyTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">aaa</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;铁扇公主&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">bbb</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ccc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;Python&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;前端&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>四、注解本质是接口</p><p><strong>Haah注解代码：</strong></p><p>经过对MyTest1注解字节码反编译(javap命令)我们会发现：</p><ol><li>Haah注解本质上是接口，每一个注解接口都继承子Annotation接口</li><li>Haah注解中的属性本质上是抽象方法</li><li>@Haah(&quot;hanli&quot;)里面的属性值，可以通过调用value()方法获取到。</li></ol><h3 id="_2️⃣-3-2-元注解" tabindex="-1">2️⃣ 3.2 元注解 <a class="header-anchor" href="#_2️⃣-3-2-元注解" aria-label="Permalink to &quot;2️⃣ 3.2 元注解&quot;">​</a></h3><p>什么是元注解</p><p><strong>元注解是修饰注解的注解</strong>。这句话虽然有一点饶，但是非常准确。我们看一个例子</p><img src="`+B+'"><p>接下来分别看一下@Target注解和@Retention注解有什么作用，如下所示</p><ul><li><code>@Target</code>是用来声明注解<strong>只能用在那些位置</strong>，比如：类上、方法上、成员变量上等</li><li><code>@Retetion</code>是用来<strong>声明注解保留周期</strong>，比如：源代码时期、字节码时期、运行时期</li></ul><img src="'+M+`"><ul><li><strong>@Target元注解的使用：比如定义一个MyTest3注解，并添加@Target注解用来声明MyTest3的使用位置</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Target</span><span style="color:#F6F6F4;">(ElementType.TYPE)	</span><span style="color:#7B7F8B;">//声明@MyTest3注解只能用在类上</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyTest3</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)	</span><span style="color:#6A737D;">//声明@MyTest3注解只能用在类上</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">MyTest3</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，我们把@MyTest3用来类上观察是否有错，再把@MyTest3用在方法上、变量上再观察是否有错</p><img src="`+S+`"><p>如果我们定义MyTest3注解时，使用@Target注解属性值写成下面样子</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//声明@MyTest3注解只能用在类上和方法上</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Target</span><span style="color:#F6F6F4;">({ElementType.TYPE,ElementType.METHOD})</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyTest3</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//声明@MyTest3注解只能用在类上和方法上</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.TYPE,ElementType.METHOD})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">MyTest3</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时再观察，@MyTest用在类上、方法上、变量上是否有错</p><img src="`+k+`"><p>到这里@Target元注解的使用就演示完毕了。</p><ul><li><strong>@Retetion元注解的使用：定义MyTest3注解时，给MyTest3注解添加@Retetion注解来声明MyTest3注解保留的时期</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Retetion是用来声明注解保留周期</span><span style="color:#F6F6F4;">，比如：源代码时期、字节码时期、运行时期</span></span>
<span class="line"><span style="color:#F6F6F4;">	@</span><span style="color:#97E1F1;font-style:italic;">Retetion</span><span style="color:#F6F6F4;">(RetetionPloicy.SOURCE)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 注解保留到源代码时期、字节码中就没有了</span></span>
<span class="line"><span style="color:#F6F6F4;">	@</span><span style="color:#97E1F1;font-style:italic;">Retetion</span><span style="color:#F6F6F4;">(RetetionPloicy.CLASS)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 注解保留到字节码中、运行时注解就没有了</span></span>
<span class="line"><span style="color:#F6F6F4;">	@</span><span style="color:#97E1F1;font-style:italic;">Retetion</span><span style="color:#F6F6F4;">(RetetionPloicy.RUNTIME)：注解保留到运行时期</span></span>
<span class="line"><span style="color:#F6F6F4;">	【自己写代码时，比较常用的是保留到运行时期】</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retetion是用来声明注解保留周期</span><span style="color:#24292E;">，比如：源代码时期、字节码时期、运行时期</span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Retetion</span><span style="color:#24292E;">(RetetionPloicy.SOURCE)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 注解保留到源代码时期、字节码中就没有了</span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Retetion</span><span style="color:#24292E;">(RetetionPloicy.CLASS)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 注解保留到字节码中、运行时注解就没有了</span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Retetion</span><span style="color:#24292E;">(RetetionPloicy.RUNTIME)：注解保留到运行时期</span></span>
<span class="line"><span style="color:#24292E;">	【自己写代码时，比较常用的是保留到运行时期】</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//声明@MyTest3注解只能用在类上和方法上</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Target</span><span style="color:#F6F6F4;">({ElementType.TYPE,ElementType.METHOD})</span></span>
<span class="line"><span style="color:#7B7F8B;">//控制使用了@MyTest3注解的代码中，@MyTest3保留到运行时期</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Retetion</span><span style="color:#F6F6F4;">(RetetionPloicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyTest3</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//声明@MyTest3注解只能用在类上和方法上</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.TYPE,ElementType.METHOD})</span></span>
<span class="line"><span style="color:#6A737D;">//控制使用了@MyTest3注解的代码中，@MyTest3保留到运行时期</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retetion</span><span style="color:#24292E;">(RetetionPloicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">MyTest3</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3️⃣-3-3-解析注解以应用" tabindex="-1">3️⃣ 3.3 解析注解以应用 <a class="header-anchor" href="#_3️⃣-3-3-解析注解以应用" aria-label="Permalink to &quot;3️⃣ 3.3 解析注解以应用&quot;">​</a></h3><p>知识储备</p><ol><li>能够自己定义注解</li><li>能够把自己定义的注解标记在类上或者方法上等位置</li><li>也理解元注解的作用</li><li>也知道注解能给程序做<strong>标记</strong>，但是缺乏实战</li></ol><p>解析注解说明</p><p><strong>解析注解</strong>：获取类上、方法上、变量上等位置注解及注解属性值</p><p><strong>解析注解套路如下：</strong></p><ol><li>如果注解在类上，先获取类的字节码对象，再获取类上的注解</li><li>如果注解在方法上，先获取方法对象，再获取方法上的注解</li><li>如果注解在成员变量上，先获取成员变量对象，再获取变量上的注解</li></ol><p><strong>总之：注解在谁身上，就先获取谁，再用谁获取谁身上的注解</strong></p><p><strong>用到的方法：</strong></p><img src="`+j+'"><p>案例1 解析注解</p><p>解析来看一个案例，来演示解析注解的代码编写</p><img src="'+_+`"><p>① <strong>先定义一个MyTest4注解</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//声明@MyTest4注解只能用在类上和方法上</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Target</span><span style="color:#F6F6F4;">({ElementType.TYPE,ElementType.METHOD})</span></span>
<span class="line"><span style="color:#7B7F8B;">//控制使用了@MyTest4注解的代码中，@MyTest4保留到运行时期</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Retetion</span><span style="color:#F6F6F4;">(RetetionPloicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyTest4</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">value</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">aaa</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#62E884;">bbb</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//声明@MyTest4注解只能用在类上和方法上</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.TYPE,ElementType.METHOD})</span></span>
<span class="line"><span style="color:#6A737D;">//控制使用了@MyTest4注解的代码中，@MyTest4保留到运行时期</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retetion</span><span style="color:#24292E;">(RetetionPloicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">MyTest4</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">aaa</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">bbb</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>② <strong>定义有一个类Demo</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">MyTest4</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛侠</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">aaa</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">99.9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">bbb</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">黑马</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Demo</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">MyTest4</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">孙悟空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">aaa</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">199.9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">bbb</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛夫人</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MyTest4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;蜘蛛侠&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">aaa</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">99.9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bbb</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;至尊宝&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;黑马&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MyTest4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;孙悟空&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">aaa</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">199.9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bbb</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;牛夫人&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>③ 写一个测试类AnnotationTest3解析Demo类上的MyTest4注解</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AnnotationTest3</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">parseClass</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//1.先获取Class对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Demo.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//2.解析Demo类上的注解</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(c.</span><span style="color:#62E884;">isAnnotationPresent</span><span style="color:#F6F6F4;">(MyTest4.class)){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//获取类上的MyTest4注解</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">MyTest4</span><span style="color:#F6F6F4;"> myTest4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (MyTest4)c.</span><span style="color:#62E884;">getDeclaredAnnotation</span><span style="color:#F6F6F4;">(MyTest4.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//获取MyTests4注解的属性值</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(myTest4.</span><span style="color:#62E884;">value</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(myTest4.</span><span style="color:#62E884;">aaa</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(myTest4.</span><span style="color:#62E884;">bbb</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">parseMethods</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//1.先获取Class对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Demo.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//2.解析Demo类中test1方法上的注解MyTest4注解</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> m </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getDeclaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(m.</span><span style="color:#62E884;">isAnnotationPresent</span><span style="color:#F6F6F4;">(MyTest4.class)){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//获取方法上的MyTest4注解</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">MyTest4</span><span style="color:#F6F6F4;"> myTest4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (MyTest4)m.</span><span style="color:#62E884;">getDeclaredAnnotation</span><span style="color:#F6F6F4;">(MyTest4.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//获取MyTests4注解的属性值</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(myTest4.</span><span style="color:#62E884;">value</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(myTest4.</span><span style="color:#62E884;">aaa</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(myTest4.</span><span style="color:#62E884;">bbb</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationTest3</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseClass</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//1.先获取Class对象</span></span>
<span class="line"><span style="color:#24292E;">    Class c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Demo.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//2.解析Demo类上的注解</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(c.</span><span style="color:#6F42C1;">isAnnotationPresent</span><span style="color:#24292E;">(MyTest4.class)){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取类上的MyTest4注解</span></span>
<span class="line"><span style="color:#24292E;">        MyTest4 myTest4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (MyTest4)c.</span><span style="color:#6F42C1;">getDeclaredAnnotation</span><span style="color:#24292E;">(MyTest4.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取MyTests4注解的属性值</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myTest4.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myTest4.</span><span style="color:#6F42C1;">aaa</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myTest4.</span><span style="color:#6F42C1;">bbb</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseMethods</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//1.先获取Class对象</span></span>
<span class="line"><span style="color:#24292E;">    Class c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Demo.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//2.解析Demo类中test1方法上的注解MyTest4注解</span></span>
<span class="line"><span style="color:#24292E;">    Method m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">isAnnotationPresent</span><span style="color:#24292E;">(MyTest4.class)){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取方法上的MyTest4注解</span></span>
<span class="line"><span style="color:#24292E;">        MyTest4 myTest4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (MyTest4)m.</span><span style="color:#6F42C1;">getDeclaredAnnotation</span><span style="color:#24292E;">(MyTest4.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取MyTests4注解的属性值</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myTest4.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myTest4.</span><span style="color:#6F42C1;">aaa</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myTest4.</span><span style="color:#6F42C1;">bbb</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>课堂作业</p><p>🚩 1. 安装上述代码，完整的练习一遍，理解其中的流程</p><p>案例2 模拟单元测试框架</p><ul><li>需求说明：自定一个@MyTest的注解,配置在方法上 <ul><li>有<code>@MyTest</code>注解的方法可以被执行</li><li>没有<code>@MyTest</code>注解的方法不能被执行</li></ul></li></ul><p>第一步：先定义一个MyTest注解</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Target</span><span style="color:#F6F6F4;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Retetion</span><span style="color:#F6F6F4;">(RetetionPloicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retetion</span><span style="color:#24292E;">(RetetionPloicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">MyTest</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步：写一个测试类AnnotationTest4，在类中定义几个被@MyTest注解标记的方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AnnotationTest4</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">MyTest</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">=====test1====</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">MyTest</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test2</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">=====test2====</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test3</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">=====test2====</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">AnnotationTest4</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AnnotationTest4</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//1.先获取Class对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> AnnotationTest4.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//2.解析AnnotationTest4类中所有的方法对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;">[] methods </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">getDeclaredMethods</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> m</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> methods){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//3.判断方法上是否有MyTest注解，有就执行该方法</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(m.</span><span style="color:#62E884;">isAnnotationPresent</span><span style="color:#F6F6F4;">(MyTest.class)){</span></span>
<span class="line"><span style="color:#F6F6F4;">            	m.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(a);</span></span>
<span class="line"><span style="color:#F6F6F4;">        	}</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationTest4</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MyTest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;=====test1====&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MyTest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;=====test2====&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test3</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;=====test2====&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        AnnotationTest4 a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationTest4</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1.先获取Class对象</span></span>
<span class="line"><span style="color:#24292E;">        Class c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AnnotationTest4.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2.解析AnnotationTest4类中所有的方法对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">getDeclaredMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Method m</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> methods){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//3.判断方法上是否有MyTest注解，有就执行该方法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">isAnnotationPresent</span><span style="color:#24292E;">(MyTest.class)){</span></span>
<span class="line"><span style="color:#24292E;">            	m.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">        	}</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,182),w=[P];function x(R,N,I,J,H,L){return n(),a("div",null,w)}const X=s(O,[["render",x]]);export{Y as __pageData,X as default};
