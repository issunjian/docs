import{_ as a,o as e,c as t,V as o}from"./chunks/framework.c6d8cbec.js";const m=JSON.parse('{"title":"JavaScript&&DOM&&BOM","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js/DOM.md","filePath":"frontend/js/DOM.md"}'),r={name:"frontend/js/DOM.md"},n=o(`<h1 id="javascript-dom-bom" tabindex="-1">JavaScript&amp;&amp;DOM&amp;&amp;BOM <a class="header-anchor" href="#javascript-dom-bom" aria-label="Permalink to &quot;JavaScript&amp;&amp;DOM&amp;&amp;BOM&quot;">​</a></h1><p>DOM（Document Object Model），文档对象模型。</p><h2 id="element对象" tabindex="-1">Element对象 <a class="header-anchor" href="#element对象" aria-label="Permalink to &quot;Element对象&quot;">​</a></h2><p>一个Element对象表示一个HTML元素，它的子节点可以是元素节点、文本节点、注释节点。NodeList表示节点列表。</p><p>Element对象继承了Node对象，而HTMLElement继承了Element对象，这节实际上指HTMLElement对象。</p><h3 id="常用方法" tabindex="-1">常用方法 <a class="header-anchor" href="#常用方法" aria-label="Permalink to &quot;常用方法&quot;">​</a></h3><h4 id="getattribute" tabindex="-1">getAttribute <a class="header-anchor" href="#getattribute" aria-label="Permalink to &quot;getAttribute&quot;">​</a></h4><h4 id="appendchild" tabindex="-1">appendChild <a class="header-anchor" href="#appendchild" aria-label="Permalink to &quot;appendChild&quot;">​</a></h4><h3 id="常用属性" tabindex="-1">常用属性 <a class="header-anchor" href="#常用属性" aria-label="Permalink to &quot;常用属性&quot;">​</a></h3><h4 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h4><h4 id="innerhtml" tabindex="-1">innerHTML <a class="header-anchor" href="#innerhtml" aria-label="Permalink to &quot;innerHTML&quot;">​</a></h4><h4 id="classname" tabindex="-1">className <a class="header-anchor" href="#classname" aria-label="Permalink to &quot;className&quot;">​</a></h4><h4 id="title" tabindex="-1">title <a class="header-anchor" href="#title" aria-label="Permalink to &quot;title&quot;">​</a></h4><h4 id="style" tabindex="-1">style <a class="header-anchor" href="#style" aria-label="Permalink to &quot;style&quot;">​</a></h4><h4 id="scrolltop" tabindex="-1">scrollTop... <a class="header-anchor" href="#scrolltop" aria-label="Permalink to &quot;scrollTop...&quot;">​</a></h4><h4 id="offsettop" tabindex="-1">offsetTop <a class="header-anchor" href="#offsettop" aria-label="Permalink to &quot;offsetTop&quot;">​</a></h4><h2 id="尺度" tabindex="-1">尺度 <a class="header-anchor" href="#尺度" aria-label="Permalink to &quot;尺度&quot;">​</a></h2><h3 id="offsetwidth" tabindex="-1">offsetWidth <a class="header-anchor" href="#offsetwidth" aria-label="Permalink to &quot;offsetWidth&quot;">​</a></h3><h3 id="clientwidth" tabindex="-1">clientWidth <a class="header-anchor" href="#clientwidth" aria-label="Permalink to &quot;clientWidth&quot;">​</a></h3><h3 id="scrollwidth" tabindex="-1">scrollWidth <a class="header-anchor" href="#scrollwidth" aria-label="Permalink to &quot;scrollWidth&quot;">​</a></h3><h3 id="innerwidth" tabindex="-1">innerWidth <a class="header-anchor" href="#innerwidth" aria-label="Permalink to &quot;innerWidth&quot;">​</a></h3><h3 id="outerwidth" tabindex="-1">outerWidth <a class="header-anchor" href="#outerwidth" aria-label="Permalink to &quot;outerWidth&quot;">​</a></h3><h2 id="更改内容" tabindex="-1">更改内容 <a class="header-anchor" href="#更改内容" aria-label="Permalink to &quot;更改内容&quot;">​</a></h2><h3 id="innerhtml-1" tabindex="-1">innerHTML <a class="header-anchor" href="#innerhtml-1" aria-label="Permalink to &quot;innerHTML&quot;">​</a></h3><p>设置和获取标签内的HTML文本。</p><h3 id="outerhtml" tabindex="-1">outerHTML <a class="header-anchor" href="#outerhtml" aria-label="Permalink to &quot;outerHTML&quot;">​</a></h3><p>设置和获取该节点（包括HTML标签）的HTML文本。</p><h3 id="innettext" tabindex="-1">innetText <a class="header-anchor" href="#innettext" aria-label="Permalink to &quot;innetText&quot;">​</a></h3><p>设置和获取标签内的文本内容。</p><h3 id="textcontent" tabindex="-1">textContent <a class="header-anchor" href="#textcontent" aria-label="Permalink to &quot;textContent&quot;">​</a></h3><p>用于设置和获取标签中的文本内容。与innerText类似，但textContent可以获取到script、style或其他元素的内容，并且会返回由css隐藏的文本，textContent改变也不会触发重排（reflow）。以及，直接对innetText修改可能会破坏元素的后代文本节点。</p><h2 id="event-事件" tabindex="-1">event 事件 <a class="header-anchor" href="#event-事件" aria-label="Permalink to &quot;event 事件&quot;">​</a></h2><h3 id="addeventlistener" tabindex="-1">addEventListener <a class="header-anchor" href="#addeventlistener" aria-label="Permalink to &quot;addEventListener&quot;">​</a></h3><p><code>element.addEventListener(eventName, function(event), userCapture=false)</code></p><p>其中this绑定被点击的元素（即target）。如果function返回了false，相当于同时执行了preventDefault与stopPropagation。</p><h4 id="preventdefault" tabindex="-1">preventDefault <a class="header-anchor" href="#preventdefault" aria-label="Permalink to &quot;preventDefault&quot;">​</a></h4><p><code>event.preventDefault()</code></p><p>比如链接就不会被打开，但是仍然会传递事件。</p><h4 id="stoppropagation" tabindex="-1">stopPropagation <a class="header-anchor" href="#stoppropagation" aria-label="Permalink to &quot;stopPropagation&quot;">​</a></h4><p>见‘阻止事件冒泡’。</p><h4 id="stopimmediatepropagation" tabindex="-1">stopImmediatePropagation <a class="header-anchor" href="#stopimmediatepropagation" aria-label="Permalink to &quot;stopImmediatePropagation&quot;">​</a></h4><p>不仅阻止事件传递，还阻止对同一事件监听的监听器执行。绑定事件的先后顺序形成了触发的先后顺序，如果执行stopImmediatePropagation，添加顺序在它之后的事件将不会执行。</p><h4 id="target和currenttarget的区别" tabindex="-1">target和currentTarget的区别 <a class="header-anchor" href="#target和currenttarget的区别" aria-label="Permalink to &quot;target和currentTarget的区别&quot;">​</a></h4><p>target：触发事件的元素</p><p>currentTarget：绑定事件的元素</p><p>target是点击的元素节点，也是事件真正的发出者，可能不同的元素触发同一事件；currentTarget是注册了侦听器的节点。在事件流中，目标阶段对应target，而捕获/冒泡、目标阶段都有可能对应currentTarget。</p><h3 id="捕获、冒泡" tabindex="-1">捕获、冒泡 <a class="header-anchor" href="#捕获、冒泡" aria-label="Permalink to &quot;捕获、冒泡&quot;">​</a></h3><p>DOM响应事件的过程包括<strong>捕获阶段、目标阶段、冒泡阶段</strong>，事件捕获自最外层元素（html）到target元素（最底层元素），然后又冒泡，将事件传递到最外层。</p><p>每一次点击都会从最外层传递到点击的最底层元素那里，然后又传递到最外层，因此，如果click同时绑定了捕获和冒泡模式下的事件，会先触发捕获事件，再触发冒泡事件。</p><h4 id="阻止事件冒泡" tabindex="-1">阻止事件冒泡 <a class="header-anchor" href="#阻止事件冒泡" aria-label="Permalink to &quot;阻止事件冒泡&quot;">​</a></h4><p>event.stopPropagation()在某一级事件处理程序中运行这句代码就可以中止传播过程。也可以利用<code>event.target==this</code>，比较触发事件的元素与当前收到事件的元素，如果不是那么不执行。</p><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h3><p>为过多元素绑定事件会带来不必要的内存开销，因此对于列表等情况，由父元素接受事件并判断、控制子元素能够优化性能。JQuery提供on、delegate方法支持事件委托。</p><h2 id="touch-触摸" tabindex="-1">touch 触摸 <a class="header-anchor" href="#touch-触摸" aria-label="Permalink to &quot;touch 触摸&quot;">​</a></h2><p>首先，我们假定一次触摸事件是从第一根手指按下到最后一根手指移开。</p><h3 id="touches" tabindex="-1">touches <a class="header-anchor" href="#touches" aria-label="Permalink to &quot;touches&quot;">​</a></h3><p>包括当前所有触摸点的数组（手指离开时是空数组）。</p><h3 id="targettouches" tabindex="-1">targetTouches <a class="header-anchor" href="#targettouches" aria-label="Permalink to &quot;targetTouches&quot;">​</a></h3><p>包括触发touchstart事件对象上所有触摸点的数组。如果两根手指分别位于触发元素的内部和外部，它只会包括内部的触摸点。注意不是绑定touch事件的元素，是<strong>触发</strong>touch事件的元素。</p><h3 id="changedtouches" tabindex="-1">changedTouches <a class="header-anchor" href="#changedtouches" aria-label="Permalink to &quot;changedTouches&quot;">​</a></h3><p>在当前触摸事件中，变化的触摸点的数组。例如两根手指同时按下，changedTouches包括这两个触摸点，移开一个手指，changedTouches又会包括这个离开的触摸点。即使触摸事件结束，changedTouches也会包括最后离开的触摸点。</p><h2 id="position-位置" tabindex="-1">position 位置 <a class="header-anchor" href="#position-位置" aria-label="Permalink to &quot;position 位置&quot;">​</a></h2><h3 id="clientx-y" tabindex="-1">clientX/Y <a class="header-anchor" href="#clientx-y" aria-label="Permalink to &quot;clientX/Y&quot;">​</a></h3><p>相对于可视区域</p><h3 id="screenx-y" tabindex="-1">screenX/Y <a class="header-anchor" href="#screenx-y" aria-label="Permalink to &quot;screenX/Y&quot;">​</a></h3><p>相对于屏幕</p><h3 id="pagex-y" tabindex="-1">pageX/Y <a class="header-anchor" href="#pagex-y" aria-label="Permalink to &quot;pageX/Y&quot;">​</a></h3><p>相对于网页</p><h2 id="文件上传" tabindex="-1">文件上传 <a class="header-anchor" href="#文件上传" aria-label="Permalink to &quot;文件上传&quot;">​</a></h2><h2 id="formdata" tabindex="-1">Formdata <a class="header-anchor" href="#formdata" aria-label="Permalink to &quot;Formdata&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">let formData = new FormData();</span></span>
<span class="line"><span style="color:#f6f6f4;">formData.append(&#39;file&#39;, fileInputElement.files[0]);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">let content = \`love like you&#39;ve never been hurt\`</span></span>
<span class="line"><span style="color:#f6f6f4;">let blob = new Blob([content],{type:&quot;text&quot;})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">let formData = new FormData();</span></span>
<span class="line"><span style="color:#24292e;">formData.append(&#39;file&#39;, fileInputElement.files[0]);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">let content = \`love like you&#39;ve never been hurt\`</span></span>
<span class="line"><span style="color:#24292e;">let blob = new Blob([content],{type:&quot;text&quot;})</span></span></code></pre></div><h3 id="formdata-append" tabindex="-1">FormData.append() <a class="header-anchor" href="#formdata-append" aria-label="Permalink to &quot;FormData.append()&quot;">​</a></h3><p><code>FormData.append(name, value[, filename])</code></p><p>向FormData添加数据，value支持Blob、File、string类型，filename可选。</p><h3 id="blob" tabindex="-1">Blob <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;Blob&quot;">​</a></h3><p>Blob对象表示一个不可变、原始数据的类文件对象，不一定是JavaScript原生格式的数据。File接口基于Blob，继承并扩展了Blob。新建Blob的配置中，type指MIMIE类型。</p><h2 id="url对象" tabindex="-1">URL对象 <a class="header-anchor" href="#url对象" aria-label="Permalink to &quot;URL对象&quot;">​</a></h2><h3 id="createobjecturl" tabindex="-1">createObjectURL <a class="header-anchor" href="#createobjecturl" aria-label="Permalink to &quot;createObjectURL&quot;">​</a></h3><p><code>objectURL=URL.createObjectURL(object)</code></p><p>其中Object的类型为FIle、Blob或MediaSource。</p><p>它返回一个指向对象的DOMString，形如<code>blob:https://mdn.mozillademos.org/8fc61dff-86bd-4ec7-ae2f-62d8df690d45</code>。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p>MDN</p><p>developer.mozilla.org</p><p>最后更新: 7/15/2020, 4:10:16 PM</p><p>本文转自 <a href="http://manual.local.guohere.com/JS/DOM.html" target="_blank" rel="noreferrer">http://manual.local.guohere.com/JS/DOM.html</a>，如有侵权，请联系删除。</p>`,86),l=[n];function i(h,s,d,c,p,u){return e(),t("div",null,l)}const f=a(r,[["render",i]]);export{m as __pageData,f as default};
