import{_ as a,o as e,c as s,V as o}from"./chunks/framework.c6d8cbec.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-12.md","filePath":"interview/backend/java/java-12.md"}'),r={name:"interview/backend/java/java-12.md"},n=o(`<h3 id="_1、64-位-jvm-中-int-的长度是多数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#164-%E4%BD%8D-jvm-%E4%B8%ADint-%E7%9A%84%E9%95%BF%E5%BA%A6%E6%98%AF%E5%A4%9A%E6%95%B0" target="_blank" rel="noreferrer">1、64 位 JVM 中，int 的长度是多数？</a> <a class="header-anchor" href="#_1、64-位-jvm-中-int-的长度是多数" aria-label="Permalink to &quot;[1、64 位 JVM 中，int 的长度是多数？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#164-位-jvm-中int-的长度是多数)&quot;">​</a></h3><p>Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的 Java 虚拟机中，int 类型的长度是相同的。</p><h3 id="_2、线程的状态" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81" target="_blank" rel="noreferrer">2、线程的状态</a> <a class="header-anchor" href="#_2、线程的状态" aria-label="Permalink to &quot;[2、线程的状态](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#2线程的状态)&quot;">​</a></h3><p>![87_2.png][87_2.png]</p><p><strong>1、</strong> 新建(new)：新创建了一个线程对象。</p><p><strong>2、</strong> 就绪（可运行状态）(runnable)：线程对象创建后，当调用线程对象的 start()方法，该线程处于就绪状态，等待被线程调度选中，获取cpu的使用权。</p><p><strong>3、</strong> 运行(running)：可运行状态(runnable)的线程获得了cpu时间片（timeslice），执行程序代码。注：就绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中；</p><p><strong>4、</strong> 阻塞(block)：处于运行状态中的线程由于某种原因，暂时放弃对 CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被 CPU 调用以进入到运行状态。</p><p><strong>阻塞的情况分三种：</strong></p><p><strong>1、</strong> 等待阻塞：</p><p>运行状态中的线程执行 wait()方法，JVM会把该线程放入等待队列(waitting queue)中，使本线程进入到等待阻塞状态；</p><p><strong>2、</strong> 同步阻塞：</p><p>线程在获取 synchronized 同步锁失败(因为锁被其它线程所占用)，，则JVM会把该线程放入锁池(lock pool)中，线程会进入同步阻塞状态；</p><p><strong>3、</strong> 其他阻塞:</p><p>通过调用线程的 sleep()或 join()或发出了 I/O 请求时，线程会进入到阻塞状态。当 sleep()状态超时、join()等待线程终止或者超时、或者 I/O 处理完毕时，线程重新转入就绪状态。</p><p><strong>4、</strong> 死亡(dead)(结束)：</p><p>线程run()、main()方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p><h3 id="_3、计算机网络有几层" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%9C%89%E5%87%A0%E5%B1%82" target="_blank" rel="noreferrer">3、计算机网络有几层？</a> <a class="header-anchor" href="#_3、计算机网络有几层" aria-label="Permalink to &quot;[3、计算机网络有几层？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#3计算机网络有几层)&quot;">​</a></h3><p><strong>1、</strong> 应用层</p><p><strong>2、</strong> 表示层</p><p><strong>3、</strong> 会话层</p><p><strong>4、</strong> 传输层</p><p><strong>5、</strong> 网络层</p><p><strong>6、</strong> 数据链路层</p><p><strong>7、</strong> 物理层</p><p><strong>8、</strong> （物理层是最底层，应用层是最高层）</p><h3 id="_4、模块化编程与热插拔" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E4%B8%8E%E7%83%AD%E6%8F%92%E6%8B%94" target="_blank" rel="noreferrer">4、模块化编程与热插拔</a> <a class="header-anchor" href="#_4、模块化编程与热插拔" aria-label="Permalink to &quot;[4、模块化编程与热插拔](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#4模块化编程与热插拔)&quot;">​</a></h3><p>OSGi 旨在为实现 Java 程序的模块化编程提供基础条件，基于 OSGi 的程序很可能可以实现模块级的热插拔功能，当程序升级更新时，可以只停用、重新安装然后启动程序的其中一部分，这对企业级程序开发来说是非常具有诱惑力的特性。</p><p>OSGi 描绘了一个很美好的模块化开发目标，而且定义了实现这个目标的所需要服务与架构，同时也有成熟的框架进行实现支持。但并非所有的应用都适合采用 OSGi 作为基础架构，它在提供强大功能同时，也引入了额外的复杂度，因为它不遵守了类加载的双亲委托模型。</p><h3 id="_5、我们能自己写一个容器类-然后使用-for-each-循环码" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5%E6%88%91%E4%BB%AC%E8%83%BD%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8-for-each-%E5%BE%AA%E7%8E%AF%E7%A0%81" target="_blank" rel="noreferrer">5、我们能自己写一个容器类，然后使用 for-each 循环码？</a> <a class="header-anchor" href="#_5、我们能自己写一个容器类-然后使用-for-each-循环码" aria-label="Permalink to &quot;[5、我们能自己写一个容器类，然后使用 for-each 循环码？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#5我们能自己写一个容器类然后使用-for-each-循环码)&quot;">​</a></h3><p>可以，你可以写一个自己的容器类。如果你想使用 Java 中增强的循环来遍历，你只需要实现 Iterable 接口。如果你实现 Collection 接口，默认就具有该属性。</p><h3 id="_6、单例防止反射漏洞攻击" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6%E5%8D%95%E4%BE%8B%E9%98%B2%E6%AD%A2%E5%8F%8D%E5%B0%84%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB" target="_blank" rel="noreferrer">6、单例防止反射漏洞攻击</a> <a class="header-anchor" href="#_6、单例防止反射漏洞攻击" aria-label="Permalink to &quot;[6、单例防止反射漏洞攻击](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#6单例防止反射漏洞攻击)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">private static boolean flag = false;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">private Singleton() {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    if (flag == false) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        flag = !flag;</span></span>
<span class="line"><span style="color:#f6f6f4;">    } else {</span></span>
<span class="line"><span style="color:#f6f6f4;">        throw new RuntimeException(&quot;单例模式被侵犯！&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">private static boolean flag = false;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">private Singleton() {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    if (flag == false) {</span></span>
<span class="line"><span style="color:#24292e;">        flag = !flag;</span></span>
<span class="line"><span style="color:#24292e;">    } else {</span></span>
<span class="line"><span style="color:#24292e;">        throw new RuntimeException(&quot;单例模式被侵犯！&quot;);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_7、工作中常用的-jvm-配置参数有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84-jvm-%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">7、工作中常用的 JVM 配置参数有哪些？</a> <a class="header-anchor" href="#_7、工作中常用的-jvm-配置参数有哪些" aria-label="Permalink to &quot;[7、工作中常用的 JVM 配置参数有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#7工作中常用的-jvm-配置参数有哪些)&quot;">​</a></h3><p>Java 8 为例</p><p><strong>日志</strong></p><p><strong>1、</strong> -XX:+PrintFlagsFinal，打印JVM所有参数的值</p><p><strong>2、</strong> -XX:+PrintGC，打印GC信息</p><p><strong>3、</strong> -XX:+PrintGCDetails，打印GC详细信息</p><p><strong>4、</strong> -XX:+PrintGCTimeStamps，打印GC的时间戳</p><p><strong>5、</strong> -Xloggc:filename，设置GC log文件的位置</p><p><strong>6、</strong> -XX:+PrintTenuringDistribution，查看熬过收集后剩余对象的年龄分布信息</p><p><strong>内存设置</strong></p><p><strong>1、</strong> -Xms，设置堆的初始化内存大小</p><p><strong>2、</strong> -Xmx，设置堆的最大内存</p><p><strong>3、</strong> -Xmn，设置新生代内存大小</p><p><strong>4、</strong> -Xss，设置线程栈大小</p><p><strong>5、</strong> -XX:NewRatio，新生代与老年代比值</p><p><strong>6、</strong> -XX:SurvivorRatio，新生代中Eden区与两个Survivor区的比值，默认为8，即Eden:Survivor:Survivor=8:1:1</p><p><strong>7、</strong> -XX:MaxTenuringThreshold，从年轻代到老年代，最大晋升年龄。CMS 下默认为 6，G1 下默认为 15</p><p><strong>8、</strong> -XX:MetaspaceSize，设置元空间的大小，第一次超过将触发 GC</p><p><strong>9、</strong> -XX:MaxMetaspaceSize，元空间最大值</p><p><strong>10、</strong> -XX:MaxDirectMemorySize，用于设置直接内存的最大值，限制通过 DirectByteBuffer 申请的内存</p><p><strong>11、</strong> -XX:ReservedCodeCacheSize，用于设置 JIT 编译后的代码存放区大小，如果观察到这个值有限制，可以适当调大，一般够用即可</p><p><strong>设置垃圾收集相关</strong></p><p><strong>1、</strong> -XX:+UseSerialGC，设置串行收集器</p><p><strong>2、</strong> -XX:+UseParallelGC，设置并行收集器</p><p><strong>3、</strong> -XX:+UseConcMarkSweepGC，使用CMS收集器</p><p><strong>4、</strong> -XX:ParallelGCThreads，设置Parallel GC的线程数</p><p><strong>5、</strong> -XX:MaxGCPauseMillis，GC最大暂停时间 ms</p><p><strong>6、</strong> -XX:+UseG1GC，使用G1垃圾收集器</p><p><strong>CMS 垃圾回收器相关</strong></p><p><strong>1、</strong> -XX:+UseCMSInitiatingOccupancyOnly</p><p><strong>2、</strong> -XX:CMSInitiatingOccupancyFraction，与前者配合使用，指定MajorGC的发生时机</p><p><strong>3、</strong> -XX:+ExplicitGCInvokesConcurrent，代码调用 System.gc() 开始并行 FullGC，建议加上这个参数</p><p><strong>4、</strong> -XX:+CMSScavengeBeforeRemark，表示开启或关闭在 CMS 重新标记阶段之前的清除（YGC）尝试，它可以降低 remark 时间，建议加上</p><p><strong>5、</strong> -XX:+ParallelRefProcEnabled，可以用来并行处理 Reference，以加快处理速度，缩短耗时</p><p><strong>G1 垃圾回收器相关</strong></p><p><strong>1、</strong> -XX:MaxGCPauseMillis，用于设置目标停顿时间，G1 会尽力达成</p><p><strong>2、</strong> -XX:G1HeapRegionSize，用于设置小堆区大小，建议保持默认</p><p><strong>3、</strong> -XX:InitiatingHeapOccupancyPercent，表示当整个堆内存使用达到一定比例（默认是 45%），并发标记阶段就会被启动</p><p><strong>4、</strong> -XX:ConcGCThreads，表示并发垃圾收集器使用的线程数量，默认值随 JVM 运行的平台不同而变动，不建议修改</p><p>参数查询官网地址：</p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noreferrer">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p><p>建议面试时最好能记住 CMS 和 G1的参数，特点突出使用较多，被问的概率大</p><h3 id="_8、面向对象的特征有哪些方面" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2" target="_blank" rel="noreferrer">8、面向对象的特征有哪些方面？</a> <a class="header-anchor" href="#_8、面向对象的特征有哪些方面" aria-label="Permalink to &quot;[8、面向对象的特征有哪些方面？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#8面向对象的特征有哪些方面)&quot;">​</a></h3><p><strong>面向对象的特征主要有以下几个方面：</strong></p><p><strong>1、</strong> 抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p><p><strong>2、</strong> 继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段（如果不能理解请阅读阎宏博士的《Java与模式》或《设计模式精解》中关于桥梁模式的部分）。</p><p><strong>3、</strong> 封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。</p><p><strong>4、</strong> 多态性：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。如果将对象的方法视为对象向外界提供的服务，那么运行时的多态性可以解释为：当A系统访问B系统提供的服务时，B系统有多种提供服务的方式，但一切对A系统来说都是透明的（就像电动剃须刀是A系统，它的供电系统是B系统，B系统可以使用电池供电或者用交流电，甚至还有可能是太阳能，A系统只会通过B类对象调用供电的方法，但并不知道供电系统的底层实现是什么，究竟通过何种方式获得了动力）。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1)、方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2)、对象造型（用父类型引用引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</p><h3 id="_9、是否了解连接池-使用连接池有什么好处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9%E6%98%AF%E5%90%A6%E4%BA%86%E8%A7%A3%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BD%BF%E7%94%A8%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84" target="_blank" rel="noreferrer">9、是否了解连接池，使用连接池有什么好处？</a> <a class="header-anchor" href="#_9、是否了解连接池-使用连接池有什么好处" aria-label="Permalink to &quot;[9、是否了解连接池，使用连接池有什么好处？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#9是否了解连接池使用连接池有什么好处)&quot;">​</a></h3><p>数据库连接是非常消耗资源的，影响到程序的性能指标。连接池是用来分配、管理、释放数据库连接的，可以使应用程序重复使用同一个数据库连接，而不是每次都创建一个新的数据库连接。通过释放空闲时间较长的数据库连接避免数据库因为创建太多的连接而造成的连接遗漏问题，提高了程序性能。</p><h3 id="_10、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10jvm-%E9%80%89%E9%A1%B9--xx:+usecompressedoops-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8" target="_blank" rel="noreferrer">10、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用</a> <a class="header-anchor" href="#_10、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用" aria-label="Permalink to &quot;[10、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题大汇总，2021年附答案解析.md#10jvm-选项--xx:+usecompressedoops-有什么作用为什么要使用)&quot;">​</a></h3><p>当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM主要动机在于可以指定最大堆大小，通过压缩OOP 可以节省一定的内存。通过-XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。</p><h3 id="_11、error和exception有什么区别" tabindex="-1">11、Error和Exception有什么区别？ <a class="header-anchor" href="#_11、error和exception有什么区别" aria-label="Permalink to &quot;11、Error和Exception有什么区别？&quot;">​</a></h3><h3 id="_12、你所了解的数据源技术有那些-使用数据源有什么好处" tabindex="-1">12、你所了解的数据源技术有那些？使用数据源有什么好处？ <a class="header-anchor" href="#_12、你所了解的数据源技术有那些-使用数据源有什么好处" aria-label="Permalink to &quot;12、你所了解的数据源技术有那些？使用数据源有什么好处？&quot;">​</a></h3><h3 id="_13、存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b" tabindex="-1">13、存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么？如 C = (C) B； <a class="header-anchor" href="#_13、存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b" aria-label="Permalink to &quot;13、存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么？如 C = (C) B；&quot;">​</a></h3><h3 id="_14、有哪些打破了双亲委托机制的案例" tabindex="-1">14、有哪些打破了双亲委托机制的案例？ <a class="header-anchor" href="#_14、有哪些打破了双亲委托机制的案例" aria-label="Permalink to &quot;14、有哪些打破了双亲委托机制的案例？&quot;">​</a></h3><h3 id="_15、java语言有哪些特点" tabindex="-1">15、Java语言有哪些特点？ <a class="header-anchor" href="#_15、java语言有哪些特点" aria-label="Permalink to &quot;15、Java语言有哪些特点？&quot;">​</a></h3><h3 id="_16、java-中的-hashset-内部是如何工作的" tabindex="-1">16、Java 中的 HashSet，内部是如何工作的？ <a class="header-anchor" href="#_16、java-中的-hashset-内部是如何工作的" aria-label="Permalink to &quot;16、Java 中的 HashSet，内部是如何工作的？&quot;">​</a></h3><h3 id="_17、创建一个子类对象的时候-那么父类的构造方法会执行吗" tabindex="-1">17、创建一个子类对象的时候，那么父类的构造方法会执行吗？ <a class="header-anchor" href="#_17、创建一个子类对象的时候-那么父类的构造方法会执行吗" aria-label="Permalink to &quot;17、创建一个子类对象的时候，那么父类的构造方法会执行吗？&quot;">​</a></h3><h3 id="_18、适配器模式和代理模式之前有什么不同" tabindex="-1">18、适配器模式和代理模式之前有什么不同？ <a class="header-anchor" href="#_18、适配器模式和代理模式之前有什么不同" aria-label="Permalink to &quot;18、适配器模式和代理模式之前有什么不同？&quot;">​</a></h3><h3 id="_19、环境变量path和classpath的作用是什么-如何设置这两个环境变量" tabindex="-1">19、环境变量Path和ClassPath的作用是什么？如何设置这两个环境变量？ <a class="header-anchor" href="#_19、环境变量path和classpath的作用是什么-如何设置这两个环境变量" aria-label="Permalink to &quot;19、环境变量Path和ClassPath的作用是什么？如何设置这两个环境变量？&quot;">​</a></h3><h3 id="_20、spring中bean的作用域有哪些" tabindex="-1">20、Spring中Bean的作用域有哪些？ <a class="header-anchor" href="#_20、spring中bean的作用域有哪些" aria-label="Permalink to &quot;20、Spring中Bean的作用域有哪些？&quot;">​</a></h3><h3 id="_21、tcp编程与udp编程有什么区别" tabindex="-1">21、TCP编程与UDP编程有什么区别？ <a class="header-anchor" href="#_21、tcp编程与udp编程有什么区别" aria-label="Permalink to &quot;21、TCP编程与UDP编程有什么区别？&quot;">​</a></h3><h3 id="_22、用java写一个单例类。" tabindex="-1">22、用Java写一个单例类。 <a class="header-anchor" href="#_22、用java写一个单例类。" aria-label="Permalink to &quot;22、用Java写一个单例类。&quot;">​</a></h3><h3 id="_23、js如何实现动态效果" tabindex="-1">23、Js如何实现动态效果？ <a class="header-anchor" href="#_23、js如何实现动态效果" aria-label="Permalink to &quot;23、Js如何实现动态效果？&quot;">​</a></h3><h3 id="_24、jit-是什么" tabindex="-1">24、JIT 是什么？ <a class="header-anchor" href="#_24、jit-是什么" aria-label="Permalink to &quot;24、JIT 是什么？&quot;">​</a></h3><h3 id="_25、java反射创建对象效率高还是通过new创建对象的效率高" tabindex="-1">25、Java反射创建对象效率高还是通过new创建对象的效率高？ <a class="header-anchor" href="#_25、java反射创建对象效率高还是通过new创建对象的效率高" aria-label="Permalink to &quot;25、Java反射创建对象效率高还是通过new创建对象的效率高？&quot;">​</a></h3><h3 id="_26、并发关键字-synchronized" tabindex="-1">26、并发关键字 synchronized ？ <a class="header-anchor" href="#_26、并发关键字-synchronized" aria-label="Permalink to &quot;26、并发关键字 synchronized ？&quot;">​</a></h3><h3 id="_27、举例说明同步和异步。" tabindex="-1">27、举例说明同步和异步。 <a class="header-anchor" href="#_27、举例说明同步和异步。" aria-label="Permalink to &quot;27、举例说明同步和异步。&quot;">​</a></h3><h3 id="_28、iterator-和-listiterator-有什么区别" tabindex="-1">28、Iterator 和 ListIterator 有什么区别？ <a class="header-anchor" href="#_28、iterator-和-listiterator-有什么区别" aria-label="Permalink to &quot;28、Iterator 和 ListIterator 有什么区别？&quot;">​</a></h3><h3 id="_29、说一下hashmap的实现原理" tabindex="-1">29、说一下HashMap的实现原理？ <a class="header-anchor" href="#_29、说一下hashmap的实现原理" aria-label="Permalink to &quot;29、说一下HashMap的实现原理？&quot;">​</a></h3><h3 id="_30、什么是多态机制-java语言是如何实现多态的" tabindex="-1">30、什么是多态机制？Java语言是如何实现多态的？ <a class="header-anchor" href="#_30、什么是多态机制-java语言是如何实现多态的" aria-label="Permalink to &quot;30、什么是多态机制？Java语言是如何实现多态的？&quot;">​</a></h3><h3 id="_31、解释一下什么叫aop-面向切面编程" tabindex="-1">31、解释一下什么叫AOP（面向切面编程）？ <a class="header-anchor" href="#_31、解释一下什么叫aop-面向切面编程" aria-label="Permalink to &quot;31、解释一下什么叫AOP（面向切面编程）？&quot;">​</a></h3><h3 id="_32、说说g1垃圾收集器的工作原理" tabindex="-1">32、说说G1垃圾收集器的工作原理 <a class="header-anchor" href="#_32、说说g1垃圾收集器的工作原理" aria-label="Permalink to &quot;32、说说G1垃圾收集器的工作原理&quot;">​</a></h3><h3 id="_33、treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素" tabindex="-1">33、TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？ <a class="header-anchor" href="#_33、treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素" aria-label="Permalink to &quot;33、TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？&quot;">​</a></h3><h3 id="_34、说一下-synchronized-底层实现原理" tabindex="-1">34、说一下 synchronized 底层实现原理？ <a class="header-anchor" href="#_34、说一下-synchronized-底层实现原理" aria-label="Permalink to &quot;34、说一下 synchronized 底层实现原理？&quot;">​</a></h3><h3 id="_35、什么是-busy-spin-我们为什么要使用它" tabindex="-1">35、什么是 Busy spin？我们为什么要使用它？ <a class="header-anchor" href="#_35、什么是-busy-spin-我们为什么要使用它" aria-label="Permalink to &quot;35、什么是 Busy spin？我们为什么要使用它？&quot;">​</a></h3><h3 id="_36、java-中-concurrenthashmap-的并发度是什么" tabindex="-1">36、Java 中 ConcurrentHashMap 的并发度是什么？ <a class="header-anchor" href="#_36、java-中-concurrenthashmap-的并发度是什么" aria-label="Permalink to &quot;36、Java 中 ConcurrentHashMap 的并发度是什么？&quot;">​</a></h3><h3 id="_37、对象的访问方式有哪些" tabindex="-1">37、对象的访问方式有哪些？ <a class="header-anchor" href="#_37、对象的访问方式有哪些" aria-label="Permalink to &quot;37、对象的访问方式有哪些？&quot;">​</a></h3><h3 id="_38、aqs支持两种同步方式" tabindex="-1">38、AQS支持两种同步方式： <a class="header-anchor" href="#_38、aqs支持两种同步方式" aria-label="Permalink to &quot;38、AQS支持两种同步方式：&quot;">​</a></h3><h3 id="_39、你经常使用什么并发容器-为什么" tabindex="-1">39、你经常使用什么并发容器，为什么？ <a class="header-anchor" href="#_39、你经常使用什么并发容器-为什么" aria-label="Permalink to &quot;39、你经常使用什么并发容器，为什么？&quot;">​</a></h3><h3 id="_40、在-java-中-executor-和-executors-的区别" tabindex="-1">40、在 Java 中 Executor 和 Executors 的区别？ <a class="header-anchor" href="#_40、在-java-中-executor-和-executors-的区别" aria-label="Permalink to &quot;40、在 Java 中 Executor 和 Executors 的区别？&quot;">​</a></h3>`,115),t=[n];function l(p,i,c,h,E,d){return e(),s("div",null,t)}const B=a(r,[["render",l]]);export{g as __pageData,B as default};
