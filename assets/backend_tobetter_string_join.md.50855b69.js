import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"最优雅的Java字符串String拼接是哪种方式？","description":"Java字符串拼接是日常编程中的常见任务。本文详细介绍了Java中不同的字符串拼接方法，包括+号操作符、String.concat、StringBuilder","frontmatter":{"title":"最优雅的Java字符串String拼接是哪种方式？","shortTitle":"String拼接","category":["Java核心"],"tag":["数组&字符串"],"description":"Java字符串拼接是日常编程中的常见任务。本文详细介绍了Java中不同的字符串拼接方法，包括+号操作符、String.concat、StringBuilder","head":[["meta",{"name":"keywords","content":"Java,字符串,String,字符串拼接,java字符串拼接,java string拼接"}]]},"headers":[],"relativePath":"backend/tobetter/string/join.md","filePath":"backend/tobetter/string/join.md"}'),p={name:"backend/tobetter/string/join.md"},o=l(`<h1 id="_4-10-string拼接" tabindex="-1">4.10 String拼接 <a class="header-anchor" href="#_4-10-string拼接" aria-label="Permalink to &quot;4.10 String拼接&quot;">​</a></h1><p>“哥，你让我看的《<a href="https://tobebetterjavaer.com/pdf/ali-java-shouce.html" target="_blank" rel="noreferrer">Java 开发手册</a>》上有这么一段内容：循环体内，拼接字符串最好使用 StringBuilder 的 <code>append()</code> 方法，而不是 + 号操作符。这是为什么呀？”三妹疑惑地问。</p><p>“其实这个问题，我们之前已经<a href="https://tobebetterjavaer.com/string/builder-buffer.html" target="_blank" rel="noreferrer">聊过</a>。”我慢吞吞地回答道，“不过，三妹，哥今天来给你深入地讲讲。”</p><p>PS：三妹能在学习的过程中不断地发现问题，让我感到非常的开心。其实很多时候，我们不应该只是把知识点记在心里，还应该问一问自己，到底是为什么，只有迈出去这一步，才能真正的成长起来。</p><h3 id="javap-探究-号操作符拼接字符串的本质" tabindex="-1">javap 探究+号操作符拼接字符串的本质 <a class="header-anchor" href="#javap-探究-号操作符拼接字符串的本质" aria-label="Permalink to &quot;javap 探究+号操作符拼接字符串的本质&quot;">​</a></h3><p>“+ 号操作符其实被 Java 在编译的时候重新解释了，换一种说法就是，+ 号操作符是一种语法糖，让字符串的拼接变得更简便了。”一边给三妹解释，我一边在 Intellij IDEA 中敲出了下面这段代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Demo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> chenmo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> wanger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(chenmo </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> wanger);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String chenmo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String wanger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(chenmo </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> wanger);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Java 8 的环境下，使用 <code>javap -c Demo.class</code> 反编译字节码后，可以看到以下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Compiled from &quot;Demo.java&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">class Demo {</span></span>
<span class="line"><span style="color:#f6f6f4;">  Demo();</span></span>
<span class="line"><span style="color:#f6f6f4;">    Code:</span></span>
<span class="line"><span style="color:#f6f6f4;">       0: aload_0</span></span>
<span class="line"><span style="color:#f6f6f4;">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#f6f6f4;">       4: return</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">  public static void main(java.lang.String[]);</span></span>
<span class="line"><span style="color:#f6f6f4;">    Code:</span></span>
<span class="line"><span style="color:#f6f6f4;">       0: ldc           #2                  // String 沉默</span></span>
<span class="line"><span style="color:#f6f6f4;">       2: astore_1</span></span>
<span class="line"><span style="color:#f6f6f4;">       3: ldc           #3                  // String 王二</span></span>
<span class="line"><span style="color:#f6f6f4;">       5: astore_2</span></span>
<span class="line"><span style="color:#f6f6f4;">       6: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#f6f6f4;">       9: new           #5                  // class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#f6f6f4;">      12: dup</span></span>
<span class="line"><span style="color:#f6f6f4;">      13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#f6f6f4;">      16: aload_1</span></span>
<span class="line"><span style="color:#f6f6f4;">      17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#f6f6f4;">      20: aload_2</span></span>
<span class="line"><span style="color:#f6f6f4;">      21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#f6f6f4;">      24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#f6f6f4;">      27: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#f6f6f4;">      30: return</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Compiled from &quot;Demo.java&quot;</span></span>
<span class="line"><span style="color:#24292e;">class Demo {</span></span>
<span class="line"><span style="color:#24292e;">  Demo();</span></span>
<span class="line"><span style="color:#24292e;">    Code:</span></span>
<span class="line"><span style="color:#24292e;">       0: aload_0</span></span>
<span class="line"><span style="color:#24292e;">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292e;">       4: return</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  public static void main(java.lang.String[]);</span></span>
<span class="line"><span style="color:#24292e;">    Code:</span></span>
<span class="line"><span style="color:#24292e;">       0: ldc           #2                  // String 沉默</span></span>
<span class="line"><span style="color:#24292e;">       2: astore_1</span></span>
<span class="line"><span style="color:#24292e;">       3: ldc           #3                  // String 王二</span></span>
<span class="line"><span style="color:#24292e;">       5: astore_2</span></span>
<span class="line"><span style="color:#24292e;">       6: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#24292e;">       9: new           #5                  // class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#24292e;">      12: dup</span></span>
<span class="line"><span style="color:#24292e;">      13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292e;">      16: aload_1</span></span>
<span class="line"><span style="color:#24292e;">      17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#24292e;">      20: aload_2</span></span>
<span class="line"><span style="color:#24292e;">      21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#24292e;">      24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#24292e;">      27: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#24292e;">      30: return</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>“你看，三妹，这里有一个 new 关键字，并且 class 类型为 <code>java/lang/StringBuilder</code>。”我指着标号为 9 的那行对三妹说，“这意味着新建了一个 StringBuilder 的对象。”</p><p>“然后看标号为 17 的这行，是一个 invokevirtual 指令，用于调用对象的方法，也就是 StringBuilder 对象的 <code>append()</code> 方法。”</p><p>“也就意味着把 chenmo（&quot;沉默&quot;）这个字符串添加到 StringBuilder 对象中了。”</p><p>“再往下看，标号为 21 的这行，又调用了一次 <code>append()</code> 方法，意味着把 wanger（&quot;王二&quot;）这个字符串添加到 StringBuilder 对象中了。”</p><p>换成 Java 代码来表示的话，大概是这个样子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Demo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> chenmo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> wanger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">((</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">(chenmo)).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(wanger).</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String chenmo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String wanger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(chenmo)).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(wanger).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>“哦，原来编译的时候把“+”号操作符替换成了 StringBuilder 的 <code>append()</code> 方法啊。”三妹恍然大悟。</p><p>“是的，不过到了 Java 9（不是长期支持版本，所以我会拿 Java 11 来演示），情况发生了一些改变，同样的代码，字节码指令完全不同了。”我说。</p><p>同样的代码，在 Java 11 的环境下，字节码指令是这样的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Compiled from &quot;Demo.java&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">public class com.itwanger.thirtyseven.Demo {</span></span>
<span class="line"><span style="color:#f6f6f4;">  public com.itwanger.thirtyseven.Demo();</span></span>
<span class="line"><span style="color:#f6f6f4;">    Code:</span></span>
<span class="line"><span style="color:#f6f6f4;">       0: aload_0</span></span>
<span class="line"><span style="color:#f6f6f4;">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#f6f6f4;">       4: return</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">  public static void main(java.lang.String[]);</span></span>
<span class="line"><span style="color:#f6f6f4;">    Code:</span></span>
<span class="line"><span style="color:#f6f6f4;">       0: ldc           #2                  // String</span></span>
<span class="line"><span style="color:#f6f6f4;">       2: astore_1</span></span>
<span class="line"><span style="color:#f6f6f4;">       3: iconst_0</span></span>
<span class="line"><span style="color:#f6f6f4;">       4: istore_2</span></span>
<span class="line"><span style="color:#f6f6f4;">       5: iload_2</span></span>
<span class="line"><span style="color:#f6f6f4;">       6: bipush        10</span></span>
<span class="line"><span style="color:#f6f6f4;">       8: if_icmpge     41</span></span>
<span class="line"><span style="color:#f6f6f4;">      11: new           #3                  // class java/lang/String</span></span>
<span class="line"><span style="color:#f6f6f4;">      14: dup</span></span>
<span class="line"><span style="color:#f6f6f4;">      15: ldc           #4                  // String 沉默</span></span>
<span class="line"><span style="color:#f6f6f4;">      17: invokespecial #5                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#f6f6f4;">      20: astore_3</span></span>
<span class="line"><span style="color:#f6f6f4;">      21: ldc           #6                  // String 王二</span></span>
<span class="line"><span style="color:#f6f6f4;">      23: astore        4</span></span>
<span class="line"><span style="color:#f6f6f4;">      25: aload_1</span></span>
<span class="line"><span style="color:#f6f6f4;">      26: aload_3</span></span>
<span class="line"><span style="color:#f6f6f4;">      27: aload         4</span></span>
<span class="line"><span style="color:#f6f6f4;">      29: invokedynamic #7,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span></span>
<span class="line"><span style="color:#f6f6f4;">      34: astore_1</span></span>
<span class="line"><span style="color:#f6f6f4;">      35: iinc          2, 1</span></span>
<span class="line"><span style="color:#f6f6f4;">      38: goto          5</span></span>
<span class="line"><span style="color:#f6f6f4;">      41: return</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Compiled from &quot;Demo.java&quot;</span></span>
<span class="line"><span style="color:#24292e;">public class com.itwanger.thirtyseven.Demo {</span></span>
<span class="line"><span style="color:#24292e;">  public com.itwanger.thirtyseven.Demo();</span></span>
<span class="line"><span style="color:#24292e;">    Code:</span></span>
<span class="line"><span style="color:#24292e;">       0: aload_0</span></span>
<span class="line"><span style="color:#24292e;">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292e;">       4: return</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  public static void main(java.lang.String[]);</span></span>
<span class="line"><span style="color:#24292e;">    Code:</span></span>
<span class="line"><span style="color:#24292e;">       0: ldc           #2                  // String</span></span>
<span class="line"><span style="color:#24292e;">       2: astore_1</span></span>
<span class="line"><span style="color:#24292e;">       3: iconst_0</span></span>
<span class="line"><span style="color:#24292e;">       4: istore_2</span></span>
<span class="line"><span style="color:#24292e;">       5: iload_2</span></span>
<span class="line"><span style="color:#24292e;">       6: bipush        10</span></span>
<span class="line"><span style="color:#24292e;">       8: if_icmpge     41</span></span>
<span class="line"><span style="color:#24292e;">      11: new           #3                  // class java/lang/String</span></span>
<span class="line"><span style="color:#24292e;">      14: dup</span></span>
<span class="line"><span style="color:#24292e;">      15: ldc           #4                  // String 沉默</span></span>
<span class="line"><span style="color:#24292e;">      17: invokespecial #5                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#24292e;">      20: astore_3</span></span>
<span class="line"><span style="color:#24292e;">      21: ldc           #6                  // String 王二</span></span>
<span class="line"><span style="color:#24292e;">      23: astore        4</span></span>
<span class="line"><span style="color:#24292e;">      25: aload_1</span></span>
<span class="line"><span style="color:#24292e;">      26: aload_3</span></span>
<span class="line"><span style="color:#24292e;">      27: aload         4</span></span>
<span class="line"><span style="color:#24292e;">      29: invokedynamic #7,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span></span>
<span class="line"><span style="color:#24292e;">      34: astore_1</span></span>
<span class="line"><span style="color:#24292e;">      35: iinc          2, 1</span></span>
<span class="line"><span style="color:#24292e;">      38: goto          5</span></span>
<span class="line"><span style="color:#24292e;">      41: return</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>看标号为 29 的这行，字节码指令为 <code>invokedynamic</code>，该指令允许由应用级的代码来决定方法解析，所谓的应用级的代码其实是一个方法——被称为引导方法（Bootstrap Method），简称 BSM，BSM 会返回一个 CallSite（调用点） 对象，这个对象就和 <code>invokedynamic</code> 指令链接在一起。以后再执行这条 <code>invokedynamic</code> 指令时就不会创建新的 CallSite 对象。CallSite 其实就是一个 MethodHandle（方法句柄）的 holder，指向一个调用点真正执行的方法——此时就是 <code>StringConcatFactory.makeConcatWithConstants()</code> 方法。</p><p>“哥，你别再说了，再说我就听不懂了。”三妹打断了我的话。</p><p>“好吧，总之就是 Java 9 以后，JDK 用了另外一种方法来动态解释 + 号操作符，具体的实现方式在字节码指令层面已经看不到了，所以我就以 Java 8 来继续讲解吧。”</p><h3 id="为什么要编译为-stringbuilder-append" tabindex="-1">为什么要编译为 StringBuilder.append <a class="header-anchor" href="#为什么要编译为-stringbuilder-append" aria-label="Permalink to &quot;为什么要编译为 StringBuilder.append&quot;">​</a></h3><p>“再回到《Java 开发手册》上的那段内容：循环体内，拼接字符串最好使用 StringBuilder 的 <code>append()</code> 方法，而不是 + 号操作符。原因就在于循环体内如果用 + 号操作符的话，就会产生大量的 StringBuilder 对象，不仅占用了更多的内存空间，还会让 Java 虚拟机不停的进行垃圾回收，从而降低了程序的性能。”</p><p>更好的写法就是在循环的外部新建一个 StringBuilder 对象，然后使用 <code>append()</code> 方法将循环体内的字符串添加进来：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Demo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> sb </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> chenmo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> wanger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(chenmo);</span></span>
<span class="line"><span style="color:#F6F6F4;">            sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(wanger);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(sb);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            String chenmo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            String wanger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(chenmo);</span></span>
<span class="line"><span style="color:#24292E;">            sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(wanger);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sb);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>来做个小测试。</p><p>第一个，for 循环中使用”+”号操作符。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    result </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">六六六</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;六六六&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二个，for 循环外部新建 StringBuilder，循环体内使用 <code>append()</code> 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> sb </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">六六六</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;六六六&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>“这两个小测试分别会耗时多长时间呢？三妹你来运行下。”</p><p>“哇，第一个小测试的执行时间是 6212 毫秒，第二个只用了不到 1 毫秒，差距也太大了吧！”三妹说。</p><p>“是的，这下明白了原因吧？”我说。</p><p>“是的，哥，原来如此。”</p><h3 id="append方法源码解析" tabindex="-1">append方法源码解析 <a class="header-anchor" href="#append方法源码解析" aria-label="Permalink to &quot;append方法源码解析&quot;">​</a></h3><p>“好了，三妹，来看一下 StringBuilder 类的 <code>append()</code> 方法的源码吧！”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> StringBuilder </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String str) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这 3 行代码其实没啥看的。我们来看父类 AbstractStringBuilder 的 <code>append()</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractStringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (str </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">appendNull</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(count </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    str.</span><span style="color:#62E884;">getChars</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len, value, count);</span></span>
<span class="line"><span style="color:#F6F6F4;">    count </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AbstractStringBuilder </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String str) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (str </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">appendNull</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> len);</span></span>
<span class="line"><span style="color:#24292E;">    str.</span><span style="color:#6F42C1;">getChars</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len, value, count);</span></span>
<span class="line"><span style="color:#24292E;">    count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>1）判断拼接的字符串是不是 null，如果是，当做字符串“null”来处理。<code>appendNull()</code> 方法的源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractStringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">appendNull</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> count;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(c </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.value;</span></span>
<span class="line"><span style="color:#F6F6F4;">    value[c</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">n</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    value[c</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">u</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    value[c</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    value[c</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AbstractStringBuilder </span><span style="color:#6F42C1;">appendNull</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value;</span></span>
<span class="line"><span style="color:#24292E;">    value[c</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;n&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    value[c</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;u&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    value[c</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    value[c</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>2）获取字符串的长度。</p><p>3）<code>ensureCapacityInternal()</code> 方法的源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// overflow-conscious code</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (minimumCapacity </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> value.length </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(value,</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">newCapacity</span><span style="color:#F6F6F4;">(minimumCapacity));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// overflow-conscious code</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (minimumCapacity </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> value.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(value,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">newCapacity</span><span style="color:#24292E;">(minimumCapacity));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于字符串内部是用数组实现的，所以需要先判断拼接后的字符数组长度是否超过当前数组的长度，如果超过，先对数组进行扩容，然后把原有的值复制到新的数组中。</p><p>4）将拼接的字符串 str 复制到目标数组 value 中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">str.</span><span style="color:#62E884;">getChars</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len, value, count)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">getChars</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len, value, count)</span></span></code></pre></div><p>5）更新数组的长度 count。</p><h3 id="string-concat-拼接字符串" tabindex="-1">String.concat 拼接字符串 <a class="header-anchor" href="#string-concat-拼接字符串" aria-label="Permalink to &quot;String.concat 拼接字符串&quot;">​</a></h3><p>“除了可以使用 + 号操作符，StringBuilder 的 <code>append()</code> 方法，还有其他的字符串拼接方法吗？”三妹问。</p><p>“有啊，比如说 String 类的 <code>concat()</code> 方法，有点像 StringBuilder 类的 <code>append()</code> 方法。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> chenmo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> wanger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(chenmo.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(wanger));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String chenmo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String wanger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(chenmo.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(wanger));</span></span></code></pre></div><p>可以来看一下 <code>concat()</code> 方法的源码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> otherLen </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (otherLen </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value.length;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> buf[] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(value, len </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> otherLen);</span></span>
<span class="line"><span style="color:#F6F6F4;">    str.</span><span style="color:#62E884;">getChars</span><span style="color:#F6F6F4;">(buf, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(buf, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(String str) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> otherLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (otherLen </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> buf[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(value, len </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> otherLen);</span></span>
<span class="line"><span style="color:#24292E;">    str.</span><span style="color:#6F42C1;">getChars</span><span style="color:#24292E;">(buf, len);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(buf, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>1）如果拼接的字符串的长度为 0，那么返回拼接前的字符串。</p><p>2）将原字符串的字符数组 value 复制到变量 buf 数组中。</p><p>3）把拼接的字符串 str 复制到字符数组 buf 中，并返回新的字符串对象。</p><p>我一行一行地给三妹解释着。</p><p>“和 <code>+</code> 号操作符相比，<code>concat()</code> 方法在遇到字符串为 null 的时候，会抛出 NullPointerException，而“+”号操作符会把 null 当做是“null”字符串来处理。”</p><p>如果拼接的字符串是一个空字符串（&quot;&quot;），那么 concat 的效率要更高一点,毕竟不需要 <code>new StringBuilder</code> 对象。</p><p>如果拼接的字符串非常多，<code>concat()</code> 的效率就会下降，因为创建的字符串对象越来越多。</p><p>“还有吗？”三妹似乎对字符串拼接很感兴趣。</p><p>“有，当然有。”</p><h3 id="string-join-拼接字符串" tabindex="-1">String.join 拼接字符串 <a class="header-anchor" href="#string-join-拼接字符串" aria-label="Permalink to &quot;String.join 拼接字符串&quot;">​</a></h3><p>String 类有一个静态方法 <code>join()</code>，可以这样来使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> chenmo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> wanger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> cmower </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">, chenmo, wanger);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(cmower);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String chenmo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String wanger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String cmower </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, chenmo, wanger);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cmower);</span></span></code></pre></div><p>第一个参数为字符串连接符，比如说：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">太特么</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">有趣了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;太特么&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;有趣了&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>输出结果为：<code>王二-太特么-有趣了</code>。</p><p>来看一下 join 方法的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">CharSequence</span><span style="color:#F6F6F4;"> delimiter, </span><span style="color:#97E1F1;font-style:italic;">CharSequence</span><span style="color:#F6F6F4;">... elements) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    Objects.</span><span style="color:#62E884;">requireNonNull</span><span style="color:#F6F6F4;">(delimiter);</span></span>
<span class="line"><span style="color:#F6F6F4;">    Objects.</span><span style="color:#62E884;">requireNonNull</span><span style="color:#F6F6F4;">(elements);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Number of elements not likely worth Arrays.stream overhead.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">StringJoiner</span><span style="color:#F6F6F4;"> joiner </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringJoiner</span><span style="color:#F6F6F4;">(delimiter);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">CharSequence</span><span style="color:#F6F6F4;"> cs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> elements) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        joiner.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(cs);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> joiner.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(CharSequence delimiter, CharSequence... elements) {</span></span>
<span class="line"><span style="color:#24292E;">    Objects.</span><span style="color:#6F42C1;">requireNonNull</span><span style="color:#24292E;">(delimiter);</span></span>
<span class="line"><span style="color:#24292E;">    Objects.</span><span style="color:#6F42C1;">requireNonNull</span><span style="color:#24292E;">(elements);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Number of elements not likely worth Arrays.stream overhead.</span></span>
<span class="line"><span style="color:#24292E;">    StringJoiner joiner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringJoiner</span><span style="color:#24292E;">(delimiter);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (CharSequence cs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> elements) {</span></span>
<span class="line"><span style="color:#24292E;">        joiner.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cs);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> joiner.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>里面新建了一个叫 StringJoiner 的对象，然后通过 for-each 循环把可变参数添加了进来，最后调用 <code>toString()</code> 方法返回 String。</p><h3 id="stringutils-join-拼接字符串" tabindex="-1">StringUtils.join 拼接字符串 <a class="header-anchor" href="#stringutils-join-拼接字符串" aria-label="Permalink to &quot;StringUtils.join 拼接字符串&quot;">​</a></h3><p>“实际的工作中，<code>org.apache.commons.lang3.StringUtils</code> 的 <code>join()</code> 方法也经常用来进行字符串拼接。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> chenmo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> wanger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">StringUtils.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(chenmo, wanger);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String chenmo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String wanger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(chenmo, wanger);</span></span></code></pre></div><p>该方法不用担心 NullPointerException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">StringUtils.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)            </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span></span>
<span class="line"><span style="color:#F6F6F4;">StringUtils.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">([])              </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">StringUtils.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">([</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">])          </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">StringUtils.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">c</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">StringUtils.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">([</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)            </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">([])              </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">])          </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abc&quot;</span></span>
<span class="line"><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a&quot;</span></span></code></pre></div><p>来看一下源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] array, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> separator, </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> startIndex, </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> endIndex) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (array </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (separator </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        separator </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> EMPTY;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> buf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">(noOfItems </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> startIndex; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> endIndex; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> startIndex) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            buf.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(separator);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (array[i] </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            buf.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(array[i]);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> buf.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] array, String separator, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> startIndex, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> endIndex) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (array </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (separator </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EMPTY;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StringBuilder buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(noOfItems </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> startIndex; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> endIndex; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> startIndex) {</span></span>
<span class="line"><span style="color:#24292E;">            buf.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(separator);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (array[i] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            buf.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(array[i]);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> buf.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>内部使用的仍然是 StringBuilder。</p><p>“好了，三妹，关于字符串拼接的知识点我们就讲到这吧。注意 Java 9 以后，对 + 号操作符的解释和之前发生了变化，字节码指令已经不同了，等后面你学了<a href="https://tobebetterjavaer.com/jvm/zijiema-zhiling.html" target="_blank" rel="noreferrer">字节码指令</a>后我们再详细地讲一次。”我说。</p><p>“嗯，哥，你休息吧，我把这些例子再重新跑一遍。”三妹说。</p>`,83),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
