import{_ as s,o as a,c as l,V as n}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"MySQL 优化","description":"","frontmatter":{},"headers":[],"relativePath":"java/其它/数据库/MySQL3.md","filePath":"java/其它/数据库/MySQL3.md"}'),p={name:"java/其它/数据库/MySQL3.md"},o=n(`<h1 id="mysql-优化" tabindex="-1">MySQL 优化 <a class="header-anchor" href="#mysql-优化" aria-label="Permalink to &quot;MySQL 优化&quot;">​</a></h1><hr><h2 id="分表设计" tabindex="-1">分表设计 <a class="header-anchor" href="#分表设计" aria-label="Permalink to &quot;分表设计&quot;">​</a></h2><ol><li>MySQL 数据库限制每个表最多存储 4096 列，并且每一行数据大小不能超过 65535 字节。</li><li>数据量到达百万级以上时，会导致修改表结构、备份、恢复都有非常大的困难。</li><li>数据量越大，装载进内存缓冲池时所占用的内存也就越大，缓冲池无法一次性装载时就会频繁进行磁盘 IO ，大大降低查询速率。</li></ol><p>因此当表数据量过大时，就要进行分表操作：</p><ul><li>水平分表：数据项分开存储。</li><li>垂直分表：按字段拆分。</li></ul><h3 id="分表原则" tabindex="-1">分表原则 <a class="header-anchor" href="#分表原则" aria-label="Permalink to &quot;分表原则&quot;">​</a></h3><ol><li><p>经常一起使用的数据放到一个表中，避免更多的关联操作。</p></li><li><p>尽量做到冷热数据分离，减小表的宽度，减少磁盘 IO，保证热数据的内存缓存命中率（表越宽，）；更有效的利用缓存，，避免读入无用的冷数据；</p></li></ol><h3 id="范式" tabindex="-1">范式 <a class="header-anchor" href="#范式" aria-label="Permalink to &quot;范式&quot;">​</a></h3><p>对表进行逻辑拆分的准则。范式级别越高，存储数据冗余越小，但相应表之间的关系也越复杂导致难以维护。一般使用第三范式。</p><ul><li><p><strong>1NF</strong> 第一范式 关系数据库一定符合条件</p></li><li><p><strong>2NF</strong> 第二范式 不能产生部分依赖（非主键字段不能被主键中部分字段唯一确定）</p></li><li><p><strong>3NF</strong> 第三范式 不能存在传递依赖（非主键字段不能被其它非主键字段唯一确定）</p></li></ul><hr><h2 id="语句设计" tabindex="-1">语句设计 <a class="header-anchor" href="#语句设计" aria-label="Permalink to &quot;语句设计&quot;">​</a></h2><h3 id="语句查询" tabindex="-1">语句查询 <a class="header-anchor" href="#语句查询" aria-label="Permalink to &quot;语句查询&quot;">​</a></h3><ul><li><strong>查询语句执行次数</strong></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">-- 查询数据库各类型语句执行次数</span></span>
<span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW [SESSION] </span><span style="color:#F286C4;">STATUS</span><span style="color:#F6F6F4;">;                      </span><span style="color:#7B7F8B;">-- 当前连接</span></span>
<span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW </span><span style="color:#F286C4;">GLOBAL</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">STATUS</span><span style="color:#F6F6F4;">;                         </span><span style="color:#7B7F8B;">-- 数据库开启后</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW </span><span style="color:#F286C4;">SESSION</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">STATUS</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">LIKE</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Com_insert%</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;     </span><span style="color:#7B7F8B;">-- 查询插入语句执行次数</span></span>
<span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW </span><span style="color:#F286C4;">GLOBAL</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">STATUS</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">LIKE</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Innodb_rows_%</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;    </span><span style="color:#7B7F8B;">-- Innodb 专用，查询影响行数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 查询数据库各类型语句执行次数</span></span>
<span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW [SESSION] </span><span style="color:#D73A49;">STATUS</span><span style="color:#24292E;">;                      </span><span style="color:#6A737D;">-- 当前连接</span></span>
<span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW </span><span style="color:#D73A49;">GLOBAL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">STATUS</span><span style="color:#24292E;">;                         </span><span style="color:#6A737D;">-- 数据库开启后</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW </span><span style="color:#D73A49;">SESSION</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">STATUS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">LIKE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Com_insert%&#39;</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">-- 查询插入语句执行次数</span></span>
<span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW </span><span style="color:#D73A49;">GLOBAL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">STATUS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">LIKE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Innodb_rows_%&#39;</span><span style="color:#24292E;">;    </span><span style="color:#6A737D;">-- Innodb 专用，查询影响行数</span></span></code></pre></div><ul><li><strong>查询当前执行语句</strong></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW PROCESSLIST;            </span><span style="color:#7B7F8B;">-- 查看数据库所有连接信息，包含正在执行的 SQL 语句</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW PROFILES;                           </span><span style="color:#7B7F8B;">-- 查看当前连接执行的所有指令：ID 和 执行时间</span></span>
<span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW </span><span style="color:#F286C4;">PROFILE</span><span style="color:#F6F6F4;"> FOR QUERY </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">;                </span><span style="color:#7B7F8B;">-- 显示第 5 条指令执行的具体信息                </span></span>
<span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> SHOW </span><span style="color:#F286C4;">PROFILE</span><span style="color:#F6F6F4;"> CPU FOR QUERY </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">;            </span><span style="color:#7B7F8B;">-- 显示第 5 条指令各步骤的执行时间</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW PROCESSLIST;            </span><span style="color:#6A737D;">-- 查看数据库所有连接信息，包含正在执行的 SQL 语句</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW PROFILES;                           </span><span style="color:#6A737D;">-- 查看当前连接执行的所有指令：ID 和 执行时间</span></span>
<span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW </span><span style="color:#D73A49;">PROFILE</span><span style="color:#24292E;"> FOR QUERY </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;                </span><span style="color:#6A737D;">-- 显示第 5 条指令执行的具体信息                </span></span>
<span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SHOW </span><span style="color:#D73A49;">PROFILE</span><span style="color:#24292E;"> CPU FOR QUERY </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;            </span><span style="color:#6A737D;">-- 显示第 5 条指令各步骤的执行时间</span></span></code></pre></div><ul><li><strong>解释语句执行方式</strong></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> EXPLAIN 具体语句;                 </span><span style="color:#7B7F8B;">-- 解释语句执行的状况（重要）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> EXPLAIN 具体语句;                 </span><span style="color:#6A737D;">-- 解释语句执行的状况（重要）</span></span></code></pre></div><h3 id="语句优化" tabindex="-1">语句优化 <a class="header-anchor" href="#语句优化" aria-label="Permalink to &quot;语句优化&quot;">​</a></h3><ol><li>fileSort 排序，没有索引时利用文件系统排序，效率低。</li><li>index 排序，如果通过索引能直接返回数据，效率高。（只能返回有索引的字段）</li></ol><p>对于 fileSort 排序，增大排序区大小满足排序需求，可以提高排序效率。</p><p>对语句的优化，主要就是对于索引的运用。</p><ol><li><p>避免使用子查询，可以把子查询优化为 join 操作。子查询不能利用索引。</p></li><li><p>对应同一列进行 or 判断时，使用 in 代替 or。in 的值不要超过 500 个，in 操作可以更有效的利用索引，or 大多数情况下很少能利用到索引。</p></li></ol><p>分组时，默认先排序后分组。会生成临时表。</p><ol><li>通过 ORDER BY null 不排序直接分组。</li><li>上索引，有索引不临时。</li></ol><h4 id="limit-分页查询" tabindex="-1">LIMIT 分页查询 <a class="header-anchor" href="#limit-分页查询" aria-label="Permalink to &quot;LIMIT 分页查询&quot;">​</a></h4><p>使用连表查询</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> student </span><span style="color:#F286C4;">ORDER BY</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">LIMIT</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2000000</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;        # 浪费时间，排序 </span><span style="color:#BF9EEE;">2000000</span><span style="color:#F6F6F4;"> 条后筛选</span></span>
<span class="line"><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> student s, (</span><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> student </span><span style="color:#F286C4;">ORDER BY</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">LIMIT</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2000000</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">) t </span><span style="color:#F286C4;">WHERE</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">s</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">id</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">t</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">id</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> student </span><span style="color:#D73A49;">ORDER BY</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2000000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;        # 浪费时间，排序 </span><span style="color:#005CC5;">2000000</span><span style="color:#24292E;"> 条后筛选</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> student s, (</span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> student </span><span style="color:#D73A49;">ORDER BY</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2000000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) t </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">t</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="优化方式" tabindex="-1">优化方式 <a class="header-anchor" href="#优化方式" aria-label="Permalink to &quot;优化方式&quot;">​</a></h2><h3 id="插入操作" tabindex="-1">插入操作 <a class="header-anchor" href="#插入操作" aria-label="Permalink to &quot;插入操作&quot;">​</a></h3><h4 id="批量插入" tabindex="-1">批量插入 <a class="header-anchor" href="#批量插入" aria-label="Permalink to &quot;批量插入&quot;">​</a></h4><p>注意：txt文件各个字段间，要用一个&quot;table&quot;键的距离隔开。一行只写一条数据。批量执行文本中的 SQL 语句。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">mysql -&gt;load data infile &#39;E:/student.txt&#39; into table student;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mysql -&gt;load data infile &#39;E:/student.txt&#39; into table student;</span></span></code></pre></div><ol><li>按主键顺序插入更高效！生成有序 txt 更好。</li><li>关闭唯一性校验：<code>SET UNIQUE CHECK = 0</code> ，导入完成后记得开启。</li><li>事务提交，手动提交事务：<code>SET AUTOCOMMIt = 0</code> ，导入完成后记得开启。</li></ol><hr><h2 id="批量执行" tabindex="-1">批量执行 <a class="header-anchor" href="#批量执行" aria-label="Permalink to &quot;批量执行&quot;">​</a></h2><h3 id="导入导出" tabindex="-1">导入导出 <a class="header-anchor" href="#导入导出" aria-label="Permalink to &quot;导入导出&quot;">​</a></h3><p>1 mysqldump -uroot -pMyPassword databaseName tableName1 tableName2 &gt; /home/foo.sql mysqldump -u 用户名 -p 数据库名 数据表名 &gt; 导出的文件名和路径</p><p>导出整个数据库</p><p>1 mysqldump -u root -p databaseName &gt; /home/test.sql (输入后会让你输入进入MySQL的密码) mysql导出数据库一个表，包括表结构和数据 mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名和路径</p><p>1 mysqldump -u root -p databaseName tableName1 &gt; /home/table1.sql 如果需要导出数据中多张表的结构及数据时，表名用空格隔开</p><p>1 mysqldump -u root -p databaseName tableName01 tableName02 &gt; /home/table.sql 仅导出数据库结构</p><p>1 mysqldump -uroot -pPassWord -d databaseName &gt; /home/database.sql 仅导出表结构</p><p>1 mysqldump -uroot -pPassWord -d databaseName tableName &gt; /home/table.sql 将语句查询出来的结果导出为.txt文件 1 mysql -uroot -pPassword database1 -e &quot;select * from table1&quot; &gt; /home/data.txt</p><p>数据导入 常用source 命令 进入mysql数据库控制台，mysql -u root -p mysql&gt;use 数据库 使用source命令，后面参数为脚本文件(.sql)</p><p>1 mysql&gt;source /home/table.sql</p><h3 id="存储过程" tabindex="-1">存储过程 <a class="header-anchor" href="#存储过程" aria-label="Permalink to &quot;存储过程&quot;">​</a></h3><p>将大批量、经常重复执行的 SQL 语句集合预存储在数据库里，外部程序可以直接调用，减少了不必要的网络通信代价。</p><hr><h2 id="sql-安全" tabindex="-1">SQL 安全 <a class="header-anchor" href="#sql-安全" aria-label="Permalink to &quot;SQL 安全&quot;">​</a></h2><h3 id="sql-注入" tabindex="-1">SQL 注入 <a class="header-anchor" href="#sql-注入" aria-label="Permalink to &quot;SQL 注入&quot;">​</a></h3><p>服务器向数据库发送的 SQL 语句往往包含用户输入：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">-- 登录验证</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> users </span><span style="color:#F286C4;">WHERE</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> 用户输入1 </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> 用户输入2 </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 登录验证</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; 用户输入1 &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; 用户输入2 &#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>如果攻击者在用户输入中插入 <code>&#39;</code>、<code>or</code>、<code>#</code> ，就可以改变 SQL 语句的功能。达到想要的目的。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">-- 返回 alice 用户信息，登录 alice 账号</span></span>
<span class="line"><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> users </span><span style="color:#F286C4;">WHERE</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> alice</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"># </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> and password = </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> 用户输入2 </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">;</span></span>
<span class="line"><span style="color:#E7EE98;">-- 返回全部用户信息，通常会默认登录首个账号（管理员）</span></span>
<span class="line"><span style="color:#E7EE98;">SELECT * FROM users WHERE id = </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> or 1# </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> 用户输入2 </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> users </span><span style="color:#F286C4;">WHERE</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">or</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">1 </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> 用户输入2 </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;     </span><span style="color:#7B7F8B;">-- AND 优先级高，先执行 AND 再执行 OR</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">-- 直接删库</span></span>
<span class="line"><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> users </span><span style="color:#F286C4;">WHERE</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">; </span><span style="color:#F286C4;">DROP</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">TABLE</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">users</span><span style="color:#F6F6F4;">;#</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> 用户输入2 </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 返回 alice 用户信息，登录 alice 账号</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; alice&#39;</span><span style="color:#24292E;"># </span><span style="color:#032F62;">&#39; and password = &#39;</span><span style="color:#24292E;"> 用户输入2 </span><span style="color:#032F62;">&#39;;</span></span>
<span class="line"><span style="color:#032F62;">-- 返回全部用户信息，通常会默认登录首个账号（管理员）</span></span>
<span class="line"><span style="color:#032F62;">SELECT * FROM users WHERE id = &#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; or 1# &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; 用户输入2 &#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1 &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; 用户输入2 &#39;</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">-- AND 优先级高，先执行 AND 再执行 OR</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">-- 直接删库</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">DROP</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">users</span><span style="color:#24292E;">;#</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; 用户输入2 &#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>在执行攻击时，攻击者可能需要知道数据库表信息，譬如表名，列名等。</p><ol><li>通过错误信息发现（输入错误语句获取）：在进行开发的时候尽量不要把出错信息打印到页面上，使用专门的错误页。</li><li>通过盲注发现：</li></ol><p>比如在用户输入中插入以下字符（如果表名首字母 ASCII 大于 97 则休眠 5s），就可以根据数据返回时间判断数据库表信息。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">SELECT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> users </span><span style="color:#F286C4;">WHERE</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> alice</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">((</span><span style="color:#F286C4;">select</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ascii</span><span style="color:#F6F6F4;">(substr((</span><span style="color:#F286C4;">select</span><span style="color:#F6F6F4;"> table_name </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">information_schema</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">tables</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">where</span><span style="color:#F6F6F4;"> table_schema</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">database</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">limit</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">),</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)))</span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;">97</span><span style="color:#F6F6F4;">,sleep(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">),</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) # </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> and password = </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> 用户输入2 </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; alice&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ascii</span><span style="color:#24292E;">(substr((</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> table_name </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">information_schema</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">tables</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> table_schema</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">database</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">limit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)))</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">97</span><span style="color:#24292E;">,sleep(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">),</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) # </span><span style="color:#032F62;">&#39; and password = &#39;</span><span style="color:#24292E;"> 用户输入2 </span><span style="color:#032F62;">&#39;;</span></span></code></pre></div><h3 id="sql-注入防御" tabindex="-1">SQL 注入防御 <a class="header-anchor" href="#sql-注入防御" aria-label="Permalink to &quot;SQL 注入防御&quot;">​</a></h3><p>(prepare_statement) 为避免 SQL 注入攻击，新版本后端语言(PHP/Java) 都支持对输入 SQL 语句预处理：会自动检查用户输入并对单引号用<code>\\</code>做强制转义， MySQL 数据库收到转义后的单引号也会用 setString 方法做转义处理。</p><p>学习网站开发的人就再也不用担心sql注入的威胁了。</p><hr><h3 id="内存优化" tabindex="-1">内存优化 <a class="header-anchor" href="#内存优化" aria-label="Permalink to &quot;内存优化&quot;">​</a></h3><p>InnoDB 用一块内存区做缓存池，既缓存数据也缓存索引。</p><p>linux mysql 配置文件 user-my.cnf</p><p>innodb_buffer_pool_size = 512M （默认128m）</p><p>innodb_log_buffer_size 日志缓存大小，过于小会频繁写入磁盘</p><h3 id="日志管理" tabindex="-1">日志管理 <a class="header-anchor" href="#日志管理" aria-label="Permalink to &quot;日志管理&quot;">​</a></h3><hr>`,72),e=[o];function t(c,r,y,F,E,i){return a(),l("div",null,e)}const h=s(p,[["render",t]]);export{C as __pageData,h as default};
