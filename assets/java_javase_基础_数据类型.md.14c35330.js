import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/转换.226a396c.png",u=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/基础/数据类型.md","filePath":"java/javase/基础/数据类型.md"}'),o={name:"java/javase/基础/数据类型.md"},t=l(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><hr><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h2><h3 id="基本类型-1" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型-1" aria-label="Permalink to &quot;基本类型&quot;">​</a></h3><p>Java 语言提供了八种基本类型，用户无需定义也可以直接使用。其数据保存在相应的方法栈中。</p><table><thead><tr><th>基本数据类型</th><th>字节数</th><th>默认值</th><th>包装数据类型</th><th>备注</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>0</td><td>Byte</td><td></td></tr><tr><td>short</td><td>2</td><td>0</td><td>Short</td><td></td></tr><tr><td>int</td><td>4</td><td>0</td><td>Integer</td><td></td></tr><tr><td>long</td><td>8</td><td>0</td><td>Long</td><td></td></tr><tr><td>float</td><td>4</td><td>0.0f</td><td>Float</td><td>数字后加f</td></tr><tr><td>double</td><td>8</td><td>0.0</td><td>Double</td><td></td></tr><tr><td>char</td><td>2</td><td>null</td><td>Character</td><td>必须用单引号</td></tr><tr><td>boolean</td><td>1</td><td>false</td><td>Boolean</td><td></td></tr></tbody></table><ul><li><strong>布尔型</strong></li></ul><p>boolean 类型只含有两个值：true 和 false。字节存储为 11111111 和 00000000 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;      </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;      </span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span></code></pre></div><ul><li><strong>字符型</strong></li></ul><p>char 类型使用单引号来表示字符。因为 Java 统一采用 unicode 编码，2 字节可以表示一字符。char 类型同样可以用十六进制码保存汉字等特殊字符：&#39;\\u0000&#39; - &#39;\\uffff&#39;。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> ch </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;      </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> ch </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">中</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> ch </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">/u3089</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">;      </span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;中&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/u3089&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><ul><li><strong>整型和浮点型</strong></li></ul><p>Java 没有无符号类型，所有数据都有符号。</p><ol><li><p>整型(byte/short/int/long) 用来表示整型数据。</p></li><li><p>浮点型(float/double) 用来表示浮点数据，实际以指数形式存储，所以和实际值之间有偏差。</p></li></ol><ul><li><p>为 float 类型赋值必须在数字后加 f，否则数字默认被识别为 double 类型，会导致赋值出错。</p></li><li><p>数字基本类型都包含最大最小值常量，如 <code>Integer.MAX_VALUE</code> 和 <code>Integer.MIN_VALUE</code> .</p></li><li><p>在浮点型有三个特殊数值表示溢出和出错：</p><ul><li><code>POSITIVE_INFINITY</code> ：正无穷大，正数除以 0 可以得到。</li><li><code>NEGATIVE_INFINITY</code> ：负无穷大，负数除以 0 可以得到。</li><li><code>NaN</code> ：非数，零除以 0 可以得到。（两个 NAN 值也不相等）</li></ul></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.0f</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> l </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Long.MAX_VALUE;               </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> POSITIVE_INFINITY;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Long.MAX_VALUE;               </span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> POSITIVE_INFINITY;</span></span></code></pre></div><h3 id="包装类型" tabindex="-1">包装类型 <a class="header-anchor" href="#包装类型" aria-label="Permalink to &quot;包装类型&quot;">​</a></h3><p>均继承自 Number 抽象类，把基本类型数据封装成对象。基本类型和包装类型之间会自动进行转化。</p><ul><li><p><strong>基本类型</strong>（如int），是一个值。允许不赋初值，系统自动添加默认值。</p></li><li><p><strong>包装类型</strong>（如Integer），是一个对象。<strong>实例化必须赋初值，且赋值后不能改变(final)。</strong></p></li></ul><p>包装类型主要用于集合框架中的元素。但阿里巴巴要求所有实体类(POJO) 属性、远程过程调用方法(RPC) 的返回值和参数都必须使用包装数据类型。以此来提醒使用者在需要使用时，必须显式地进行赋值。</p><h3 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h3><p><img src="`+p+`" alt=""></p><p>对于基础类型：</p><ul><li><p>按上图顺序可以自动进行类型转换。但整型转化为浮点型时，如果数据过大可能会导致数据丢失精度。</p></li><li><p>反之则必须进行强制类型转换。但务必小心，超出范围可能会产生意想不到的错误。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">x</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;                  </span><span style="color:#7B7F8B;">// 自动转换</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)</span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;">;            </span><span style="color:#7B7F8B;">// 强制转换</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">;                  </span><span style="color:#6A737D;">// 自动转换</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">;            </span><span style="color:#6A737D;">// 强制转换</span></span></code></pre></div><p>但是包装类型之间的转换，需要使用特殊的方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> l.</span><span style="color:#62E884;">intValue</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> l </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i.</span><span style="color:#62E884;">longValue</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Integer i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l.</span><span style="color:#6F42C1;">intValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Long l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i.</span><span style="color:#6F42C1;">longValue</span><span style="color:#24292E;">();</span></span></code></pre></div><hr><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="array-类" tabindex="-1">Array 类 <a class="header-anchor" href="#array-类" aria-label="Permalink to &quot;Array 类&quot;">​</a></h3><p>数据的集合。本质是一个对象，数据存储在堆区，由引用指向数组首个元素的地址。</p><h4 id="创建数组" tabindex="-1">创建数组 <a class="header-anchor" href="#创建数组" aria-label="Permalink to &quot;创建数组&quot;">​</a></h4><p>创建数组时，必须确定数组长度和类型。但如果储存的是基本类型，允许不赋初值（使用默认值）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">];                    </span><span style="color:#7B7F8B;">// 方法一</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">};                     </span><span style="color:#7B7F8B;">// 方法二</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[]{</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">};            </span><span style="color:#7B7F8B;">// 方法三</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];                    </span><span style="color:#6A737D;">// 方法一</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};                     </span><span style="color:#6A737D;">// 方法二</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[]{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};            </span><span style="color:#6A737D;">// 方法三</span></span></code></pre></div><p><strong>数组长度</strong>：在数组对象中，定义了 length 属性记录了数组长度。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.length;                      </span><span style="color:#7B7F8B;">// 返回数组长度</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.length;                      </span><span style="color:#6A737D;">// 返回数组长度</span></span></code></pre></div><h3 id="arrays-类" tabindex="-1">Arrays 类 <a class="header-anchor" href="#arrays-类" aria-label="Permalink to &quot;Arrays 类&quot;">​</a></h3><p>对数组进行操作的辅助类，实现了对数组的常用操作。</p><h4 id="数组排序" tabindex="-1">数组排序 <a class="header-anchor" href="#数组排序" aria-label="Permalink to &quot;数组排序&quot;">​</a></h4><p><strong>sort 方法</strong>：可以对数组排序，默认数组数值从小到大排列，用户可以自定义排列顺序，</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(arr);                                     </span><span style="color:#7B7F8B;">// 数组排序</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(arr);                                     </span><span style="color:#6A737D;">// 数组排序</span></span></code></pre></div><h4 id="数组复制" tabindex="-1">数组复制 <a class="header-anchor" href="#数组复制" aria-label="Permalink to &quot;数组复制&quot;">​</a></h4><p><strong>copyOf/copyOfRange 方法</strong>：复制数组。底层调用 System.arrayCopy 的本地方法实现，常用于数组扩容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(arr, </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);                  </span><span style="color:#7B7F8B;">// 复制数组：前 10 个单位</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(arr, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, arr.length);       </span><span style="color:#7B7F8B;">// 复制数组：从 0 到 arr.length - 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(arr, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);                  </span><span style="color:#6A737D;">// 复制数组：前 10 个单位</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(arr, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, arr.length);       </span><span style="color:#6A737D;">// 复制数组：从 0 到 arr.length - 1</span></span></code></pre></div><h4 id="数组转化" tabindex="-1">数组转化 <a class="header-anchor" href="#数组转化" aria-label="Permalink to &quot;数组转化&quot;">​</a></h4><p><strong>asList 方法</strong>：将数组转化为列表（List 类），但数组数据必须是包装类型。</p><p>调用该方法将数组转换为列表后，在内存中实际还是以数组形式存储。这可能会导致以下两个问题：</p><ol><li>调用 List 类的 add 方法向列表中插入数据，会导致异常；</li><li>对原数组进行更改，也会导致列表中的数据发生变化。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">arr[] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;">[]{</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">};                    </span><span style="color:#7B7F8B;">// 数组必须是包装数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">asList</span><span style="color:#F6F6F4;">(arr);                       </span><span style="color:#7B7F8B;">// 将数组转换为集合（有问题）               </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;(Arrays.</span><span style="color:#62E884;">asList</span><span style="color:#F6F6F4;">(arr));      </span><span style="color:#7B7F8B;">// 将数组转换为集合（推荐）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">[]{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};                    </span><span style="color:#6A737D;">// 数组必须是包装数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">List list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(arr);                       </span><span style="color:#6A737D;">// 将数组转换为集合（有问题）               </span></span>
<span class="line"><span style="color:#24292E;">List list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(arr));      </span><span style="color:#6A737D;">// 将数组转换为集合（推荐）</span></span></code></pre></div><hr><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><h3 id="string-类" tabindex="-1">String 类 <a class="header-anchor" href="#string-类" aria-label="Permalink to &quot;String 类&quot;">​</a></h3><p>保存字符串。String 类本质是一个 final 对象，由引用指向存储字符串对象的地址。引用虽然可变，但内存数据不能被更改。</p><h4 id="创建字符串" tabindex="-1">创建字符串 <a class="header-anchor" href="#创建字符串" aria-label="Permalink to &quot;创建字符串&quot;">​</a></h4><p>String 对象创建后一经赋值不再改变，有以下两种创建方式：</p><ol><li><p>直接赋值：如果常量池没有，则在常量池新建对象。否则直接使用常量池中已有对象，<strong>引用指向常量池。</strong></p></li><li><p>构造方法：如果常量池没有，则在常量池新建对象。无论如何一定会在堆区创建对象，<strong>引用指向堆区。</strong></p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;                       </span><span style="color:#7B7F8B;">// 引用指向常量池</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">str</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ing</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;                  </span><span style="color:#7B7F8B;">// 引用指向常量池（指向 str1 的字符串对象）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 引用指向堆区（在堆区新建字符串对象）</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str1 </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> str2;                    </span><span style="color:#7B7F8B;">// 引用指向堆区</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> newStr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ISO-8859-1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GBK</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);          </span><span style="color:#7B7F8B;">// 获取指定类型编码对象，按指定类型编码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String str1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">;                       </span><span style="color:#6A737D;">// 引用指向常量池</span></span>
<span class="line"><span style="color:#24292E;">String str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;str&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ing&quot;</span><span style="color:#24292E;">;                  </span><span style="color:#6A737D;">// 引用指向常量池（指向 str1 的字符串对象）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String str3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 引用指向堆区（在堆区新建字符串对象）</span></span>
<span class="line"><span style="color:#24292E;">String str4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str2;                    </span><span style="color:#6A737D;">// 引用指向堆区</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String newStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ISO-8859-1&quot;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;GBK&quot;</span><span style="color:#24292E;">);          </span><span style="color:#6A737D;">// 获取指定类型编码对象，按指定类型编码</span></span></code></pre></div><p>String 对象创建后一经赋值不再改变。对字符串数据进行改变，实际是创建新的 String 对象，并改变引用指向新的对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">str1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">goodbye</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;                             </span><span style="color:#7B7F8B;">// str1 指向新的字符串对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">str1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;goodbye&quot;</span><span style="color:#24292E;">;                             </span><span style="color:#6A737D;">// str1 指向新的字符串对象</span></span></code></pre></div><h4 id="常用方法" tabindex="-1">常用方法 <a class="header-anchor" href="#常用方法" aria-label="Permalink to &quot;常用方法&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">// 返回字符串长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] strs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">split</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 按分隔符分解字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(str2);           </span><span style="color:#7B7F8B;">// 判断是否存在子字符串</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(str2);            </span><span style="color:#7B7F8B;">// 查找子字符串出现的第一个位置，没有返回-1</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">lastIndexOf</span><span style="color:#F6F6F4;">(str2);        </span><span style="color:#7B7F8B;">// 查找子字符串出现的最后一个位置，没有返回-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">trim</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 去除字符串左右空格　　</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">substring</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">// 截取指定位置（0-2）的子字符串</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">replace</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);      </span><span style="color:#7B7F8B;">// 新字符 a 替换旧字符 b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">// 返回字符串长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] strs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 按分隔符分解字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(str2);           </span><span style="color:#6A737D;">// 判断是否存在子字符串</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(str2);            </span><span style="color:#6A737D;">// 查找子字符串出现的第一个位置，没有返回-1</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(str2);        </span><span style="color:#6A737D;">// 查找子字符串出现的最后一个位置，没有返回-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 去除字符串左右空格　　</span></span>
<span class="line"><span style="color:#24292E;">String str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// 截取指定位置（0-2）的子字符串</span></span>
<span class="line"><span style="color:#24292E;">String str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">);      </span><span style="color:#6A737D;">// 新字符 a 替换旧字符 b</span></span></code></pre></div><h4 id="类型转换-1" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换-1" aria-label="Permalink to &quot;类型转换&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Number &gt; String</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> data.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();              </span><span style="color:#7B7F8B;">// data 必须为包装数据类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Integer.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(data);       </span><span style="color:#7B7F8B;">// data 可以为基础数据类型，包括字符数组 char[]</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.</span><span style="color:#62E884;">valueOf</span><span style="color:#F6F6F4;">(data);         </span><span style="color:#7B7F8B;">// data 可以为基础数据类型，包括字符数组 char[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// String &gt; char</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">charAt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] ch </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">toCharArray</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// String &gt; int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Integer.</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(str);          </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Integer.</span><span style="color:#62E884;">valueOf</span><span style="color:#F6F6F4;">(str);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Number &gt; String</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();              </span><span style="color:#6A737D;">// data 必须为包装数据类型</span></span>
<span class="line"><span style="color:#24292E;">String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(data);       </span><span style="color:#6A737D;">// data 可以为基础数据类型，包括字符数组 char[]</span></span>
<span class="line"><span style="color:#24292E;">String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(data);         </span><span style="color:#6A737D;">// data 可以为基础数据类型，包括字符数组 char[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// String &gt; char</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">toCharArray</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// String &gt; int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(str);          </span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(str);</span></span></code></pre></div><h3 id="stringbuilder-stringbuffer-类" tabindex="-1">StringBuilder / StringBuffer 类 <a class="header-anchor" href="#stringbuilder-stringbuffer-类" aria-label="Permalink to &quot;StringBuilder / StringBuffer 类&quot;">​</a></h3><p>由于 String 类不可变性，对其频繁更改往往会产生较多临时变量类，占用大量内存。对此我们通常使用 StringBuilder/StringBuffer 来避免，这两个类允许在原有内存地址对字符串进行操作。其中 StringBuilder 类性能更好，StringBuffer 类线程安全。</p><h4 id="创建字符串-1" tabindex="-1">创建字符串 <a class="header-anchor" href="#创建字符串-1" aria-label="Permalink to &quot;创建字符串&quot;">​</a></h4><p>必须通过构造方法创建，不可以直接赋值的形式创建：<s><code>StringBuffer str = &quot;hello&quot;;</code></s>。</p><p>字符串默认长度为16，超出后会进行自动扩容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">StringBuffer</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuffer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StringBuffer str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>将 StringBuilder / StringBuffer 类转化为 String 类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="专用方法" tabindex="-1">专用方法 <a class="header-anchor" href="#专用方法" aria-label="Permalink to &quot;专用方法&quot;">​</a></h4><p>StringBuilder / StringBuffer 类可以使用 String 类的全部方法，还新增了以下方法直接对字符串进行修改。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">str.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">add</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 末尾添加字符串，也可以是其他基础类型</span></span>
<span class="line"><span style="color:#F6F6F4;">str.</span><span style="color:#62E884;">insert</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">insert</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);            </span><span style="color:#7B7F8B;">// 指定位置插入字符串，也可以是其他基础类型</span></span>
<span class="line"><span style="color:#F6F6F4;">str.</span><span style="color:#62E884;">deleteCharAt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">);               </span><span style="color:#7B7F8B;">// 删除指定位置（6）的字符</span></span>
<span class="line"><span style="color:#F6F6F4;">str.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">);                   </span><span style="color:#7B7F8B;">// 删除指定位置（6和7）的字符串</span></span>
<span class="line"><span style="color:#F6F6F4;">str.</span><span style="color:#62E884;">reverse</span><span style="color:#F6F6F4;">(str2);                 </span><span style="color:#7B7F8B;">// 翻转字符串</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;add&quot;</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 末尾添加字符串，也可以是其他基础类型</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;insert&quot;</span><span style="color:#24292E;">);            </span><span style="color:#6A737D;">// 指定位置插入字符串，也可以是其他基础类型</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">deleteCharAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// 删除指定位置（6）的字符</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);                   </span><span style="color:#6A737D;">// 删除指定位置（6和7）的字符串</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">(str2);                 </span><span style="color:#6A737D;">// 翻转字符串</span></span></code></pre></div><hr><h2 id="大数" tabindex="-1">大数 <a class="header-anchor" href="#大数" aria-label="Permalink to &quot;大数&quot;">​</a></h2><p>在 Java 程序中，我们可能会用到一些数值特别巨大、或者小数特别精确的数值，这些数值无法用基础类型表示。因此我们定义了 BigInteger/BigDecimal 类来保存这类数据，实际是以字符串形式在堆区存储。</p><h3 id="biginteger-类" tabindex="-1">BigInteger 类 <a class="header-anchor" href="#biginteger-类" aria-label="Permalink to &quot;BigInteger 类&quot;">​</a></h3><p>主要用来操作比 long 类型更大的整型数字。</p><h3 id="bigdecimal-类" tabindex="-1">BigDecimal 类 <a class="header-anchor" href="#bigdecimal-类" aria-label="Permalink to &quot;BigDecimal 类&quot;">​</a></h3><p>基于 BigInteger 类实现。由于基本浮点数类型(float/double) 会产生精度丢失问题，因此常使用 BigDecimal 类代替。涉及金额必须使用该类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1.0f</span><span style="color:#F6F6F4;">;                           </span><span style="color:#7B7F8B;">// 约等于 0.1</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1.0f</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.9f</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.9f</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.8f</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(a </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> b);               </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BigDecimal</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);     </span><span style="color:#7B7F8B;">// 等于 0.1</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BigDecimal</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">0.9</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BigDecimal</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">0.8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">subtract</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b.</span><span style="color:#62E884;">subtract</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(x.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(y));          </span><span style="color:#7B7F8B;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0f</span><span style="color:#24292E;">;                           </span><span style="color:#6A737D;">// 约等于 0.1</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.9f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.9f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b);               </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">BigDecimal a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// 等于 0.1</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0.9&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0.8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">subtract</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">subtract</span><span style="color:#24292E;">(c);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(y));          </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h4 id="biginteger-和-bigdecimal-类常用方法" tabindex="-1">BigInteger 和 BigDecimal 类常用方法 <a class="header-anchor" href="#biginteger-和-bigdecimal-类常用方法" aria-label="Permalink to &quot;BigInteger 和 BigDecimal 类常用方法&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(b);                  </span><span style="color:#7B7F8B;">// 加</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">subtract</span><span style="color:#F6F6F4;">(b);             </span><span style="color:#7B7F8B;">// 减</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">multiply</span><span style="color:#F6F6F4;">(b);             </span><span style="color:#7B7F8B;">// 乘</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">divide</span><span style="color:#F6F6F4;">(b);               </span><span style="color:#7B7F8B;">// 除</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">abs</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">// 绝对值</span></span>
<span class="line"><span style="color:#F6F6F4;">a.</span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(b);                           </span><span style="color:#7B7F8B;">// 比较大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// BigDecimal 类专用</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BigDecimal</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> y.</span><span style="color:#62E884;">setScale</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, rules);      </span><span style="color:#7B7F8B;">// 设置精度和保留规则</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BigDecimal x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(b);                  </span><span style="color:#6A737D;">// 加</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">subtract</span><span style="color:#24292E;">(b);             </span><span style="color:#6A737D;">// 减</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(b);             </span><span style="color:#6A737D;">// 乘</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">divide</span><span style="color:#24292E;">(b);               </span><span style="color:#6A737D;">// 除</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">// 绝对值</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(b);                           </span><span style="color:#6A737D;">// 比较大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// BigDecimal 类专用</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y.</span><span style="color:#6F42C1;">setScale</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, rules);      </span><span style="color:#6A737D;">// 设置精度和保留规则</span></span></code></pre></div><h2 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h2><h3 id="enum-类" tabindex="-1">Enum 类 <a class="header-anchor" href="#enum-类" aria-label="Permalink to &quot;Enum 类&quot;">​</a></h3><p>（JDK 1.5 新增）比 Class 类多了部分特殊约束的特殊类型，能更加简洁地定义常量。</p><p>使代码更具可读性，允许进行编译时检查，预先记录可接受值的列表，并避免由于传入无效值而引起的意外行为。</p><blockquote><p>自定义枚举类实际是继承 Enum 类的 final 类，在类中将自定义该类型的 public static final 属性，并引入了相关方法。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 定义枚举类</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">enum</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Day</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">MONDAY</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">TUESDAY</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">WEDNESDAY</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">THURSDAY</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">FRIDAY</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">SATURDAY</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">SUNDAY</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用枚举类</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Demo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Day</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">today</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(today </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> Day.MONDAY) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> teturn </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义枚举类</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Day</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">MONDAY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">TUESDAY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">WEDNESDAY</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">THURSDAY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">FRIDAY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SATURDAY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SUNDAY</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用枚举类</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(Day </span><span style="color:#E36209;">today</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(today </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Day.MONDAY) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> teturn </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过在枚举类型中定义属性,方法和构造函数让它变得更加强大。</p><p><em>实际开发中，枚举类通常的形式是有两个参数（int code，Sring msg）的构造器，可以作为状态码进行返回。</em></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">enum</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StatusCodeEnum</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">SUCCESS</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">成功</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), </span><span style="color:#BF9EEE;">NOTFOUND</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">404</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">未找到</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), </span><span style="color:#BF9EEE;">ERROR</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">500</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">错误</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> code;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> message;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 根据常量自动构造</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StatusCodeEnum</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">code</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">message</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.code </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> code;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> message;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getCode</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> code;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> message;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">PinType{</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">code=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> code </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, message=&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\&#39;</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">}</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatusCodeEnum</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SUCCESS</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;成功&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">NOTFOUND</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;未找到&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">ERROR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> code;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String message;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据常量自动构造</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatusCodeEnum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">code</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> code;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;PinType{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;code=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> code </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, message=&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\&#39;</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据常量自动构造对象并调用方法</p><p><code>System.out.println(StatusCodeEnum.SUCCESS.getCode());</code></p><hr><h2 id="时间" tabindex="-1">时间 <a class="header-anchor" href="#时间" aria-label="Permalink to &quot;时间&quot;">​</a></h2><h3 id="数字类型" tabindex="-1">数字类型 <a class="header-anchor" href="#数字类型" aria-label="Permalink to &quot;数字类型&quot;">​</a></h3><p>在日常 Java 开发中，我们最常使用 Long 类型，而不是 Date/Timestamp 类型表示时间。</p><p>我们可以通过 System.currentTimeMillis 方法获取当前系统时间，默认为 13 位的数字（精确到 ms）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> timestamp1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 13 位 精确到 ms</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> timestamp2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">;        </span><span style="color:#7B7F8B;">// 10 位 精确到 s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Long timestamp1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 13 位 精确到 ms</span></span>
<span class="line"><span style="color:#24292E;">Long timestamp2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">;        </span><span style="color:#6A737D;">// 10 位 精确到 s</span></span></code></pre></div><hr><h2 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h2><h3 id="泛型定义" tabindex="-1">泛型定义 <a class="header-anchor" href="#泛型定义" aria-label="Permalink to &quot;泛型定义&quot;">​</a></h3><p>定义类时并不固定数据类型，等到创建对象或调用方法时再明确数据类型。</p><p><a href="./javase/JVM/JVM介绍.html?id=java-运行原理">编译</a>过程中，由编译器检查类型安全，自动隐性地对类的数据类型进行强制转换（Object -&gt; 指定数据类型）。编译后生成的 字节码文件(.class) 将不再含有泛型。</p><h3 id="泛型使用" tabindex="-1">泛型使用 <a class="header-anchor" href="#泛型使用" aria-label="Permalink to &quot;泛型使用&quot;">​</a></h3><p>可使用 A-Z 之间的任何一个字母，常用：</p><ul><li>T (type)： 表示具体的一个 java 类型</li><li>K V (key value)： 分别代表 java 键值中的 Key Value</li><li>E (element)： 代表 java 集合框架元素</li><li>？：表示不确定的 java 类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 定义时使用泛型</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Box</span><span style="color:#F6F6F4;">&lt;T&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">t</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 调用时明确类型</span></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Box</span><span style="color:#F6F6F4;">&lt;Integer&gt; myBox </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Box</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        myBox.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(myBox.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义时使用泛型</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> T t;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调用时明确类型</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        Box&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; myBox </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Box&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        myBox.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(myBox.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,111),e=[t];function c(r,y,F,i,E,d){return a(),n("div",null,e)}const h=s(o,[["render",c]]);export{u as __pageData,h as default};
